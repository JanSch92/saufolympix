{% extends 'baselive.html.twig' %}

{% block title %}{{ olympix.name }} – Live Display{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Professional animations */
        @keyframes pulse-glow {
            0%, 100% {
                box-shadow: 0 0 5px rgba(16, 185, 129, 0.4);
            }
            50% {
                box-shadow: 0 0 20px rgba(16, 185, 129, 0.6);
            }
        }
        
        .pulse-glow {
            animation: pulse-glow 2s ease-in-out infinite;
        }
        
        /* Professional card hover effects */
        .hover-lift {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .hover-lift:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1);
        }
        
        /* Progress bar animation */
        .progress-bar {
            background: linear-gradient(90deg, #10b981, #06b6d4);
            transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        /* Tournament bracket styling */
        .tournament-match {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .tournament-match::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
            transition: left 0.5s ease;
        }
        
        .tournament-match:hover::before {
            left: 100%;
        }
        
        /* Professional status indicators */
        .status-indicator {
            position: relative;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            position: relative;
        }
        
        .status-dot.active {
            background: #10b981;
            box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.3);
        }
        
        .status-dot.active::after {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            border-radius: 50%;
            border: 2px solid #10b981;
            animation: ping 2s cubic-bezier(0, 0, 0.2, 1) infinite;
        }
        
        @keyframes ping {
            75%, 100% {
                transform: scale(2);
                opacity: 0;
            }
        }
        
        /* Professional scrollbars */
        .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
        }
        
        .custom-scrollbar::-webkit-scrollbar-track {
            background: rgba(30, 41, 59, 0.3);
            border-radius: 3px;
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: rgba(71, 85, 105, 0.6);
            border-radius: 3px;
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: rgba(71, 85, 105, 0.8);
        }
        
        /* Gradient text */
        .gradient-text {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        /* Professional card styling */
        .professional-card {
            background: rgba(30, 41, 59, 0.4);
            border: 1px solid rgba(71, 85, 105, 0.3);
            border-radius: 0.75rem;
            backdrop-filter: blur(20px);
        }

        /* FIXIERTE HÖHEN FÜR SCROLL-CONTAINER - OPTIMIERT FÜR 1080px */
        #game-history {
          max-height: 50vh !important;
          min-height: 250px !important;
          overflow-y: auto !important;
        }
        
        #players-ranking {
          min-height: 550px !important;
          overflow-y: auto !important;
        }
        
        #tournament-bracket {
          max-height: 55vh !important;
          min-height: 300px !important;
          overflow-y: auto !important;
        }
        
        #tournament-results {
          max-height: 45vh !important;
          min-height: 200px !important;
          overflow-y: auto !important;
        }

        /* GAMECHANGER SPEZIFISCHE HÖHEN */
        #gamechanger-live-ranking {
          height: calc(100vh - 200px) !important;
          overflow-y: auto !important;
        }
        
        #gamechanger-throws {
          height: calc(100vh - 300px) !important;
          overflow-y: auto !important;
        }

        /* RANKING ANIMATIONEN */
        .ranking-item {
          transition: all 0.3s ease;
        }
        
        .ranking-item.position-up {
          animation: slideUp 0.6s ease-out;
        }
        
        .ranking-item.position-down {
          animation: slideDown 0.6s ease-out;
        }
        
        @keyframes slideUp {
          0% {
            transform: translateY(20px);
            background-color: rgba(16, 185, 129, 0.2);
          }
          100% {
            transform: translateY(0);
            background-color: transparent;
          }
        }
        
        @keyframes slideDown {
          0% {
            transform: translateY(-20px);
            background-color: rgba(239, 68, 68, 0.2);
          }
          100% {
            transform: translateY(0);
            background-color: transparent;
          }
        }
        
        /* POSITION CHANGE INDICATORS */
        .position-indicator {
          position: absolute;
          top: 50%;
          right: -12px;
          transform: translateY(-50%);
          font-size: 0.75rem;
          font-weight: bold;
          padding: 2px 6px;
          border-radius: 4px;
          opacity: 0;
          transition: opacity 0.3s ease;
        }
        
        .position-indicator.show {
          opacity: 1;
        }
        
        .position-indicator.up {
          background: rgba(16, 185, 129, 0.2);
          color: #10b981;
          border: 1px solid rgba(16, 185, 129, 0.3);
        }
        
        .position-indicator.down {
          background: rgba(239, 68, 68, 0.2);
          color: #ef4444;
          border: 1px solid rgba(239, 68, 68, 0.3);
        }
    </style>
{% endblock %}

{% block body %}
<div class="w-screen h-screen flex flex-col bg-slate-900 text-slate-100 overflow-hidden">

  <!-- PROFESSIONAL HEADER -->
  <header class="flex-none h-16 flex items-center justify-between px-8 bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50">
    <div class="flex items-center space-x-4">
      <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center">
        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
      </div>
      <div>
        <p class="text-sm text-slate-400">Live Dashboard</p>
      </div>
    </div>
    
    <div class="flex items-center space-x-4">
      <div class="hidden md:flex items-center space-x-6 text-sm">
        <div class="flex items-center space-x-2">
          <span class="text-slate-400">Spiele gesamt</span>
          <span class="font-semibold text-xl">{{ olympix.games|length }}</span>
        </div>
        <div class="flex items-center space-x-2">
          <span class="text-slate-400">Abgeschlossen</span>
          <span class="font-semibold text-xl text-emerald-400">{{ olympix.completedGamesCount }}</span>
        </div>
      </div>
      
      <div class="status-indicator">
        <div class="status-dot active"></div>
        <span class="text-sm font-medium text-emerald-400">Live</span>
      </div>
    </div>
  </header>

  <!-- PROGRESS SECTION -->
  <section class="flex-none h-16 flex items-center px-8 bg-slate-800/30 border-b border-slate-700/30">
    <div class="w-full flex items-center space-x-6">
      <div class="flex items-center space-x-3">
        <svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
        <span class="text-sm text-slate-400">Fortschritt</span>
      </div>
      
      <div class="flex-1 flex items-center space-x-4">
        <div class="flex-1 h-2 bg-slate-700 rounded-full overflow-hidden">
          <div class="progress-bar h-full rounded-full" style="width: {{ olympix.progress }}%"></div>
        </div>
        <div class="text-lg font-semibold">{{ olympix.progress }}%</div>
      </div>
    </div>
  </section>

  <!-- MAIN LAYOUT -->
  <main class="flex-1 grid grid-rows-[auto_1fr] lg:grid-cols-12 lg:grid-rows-none overflow-hidden gap-6 p-6">

    <!-- RANKINGS SIDEBAR -->
    <aside class="hidden lg:block lg:col-span-3 tournament-hide-sidebar">
      <div class="professional-card h-full flex flex-col overflow-hidden hover-lift">
        <div class="px-6 py-4 border-b border-slate-700/50">
          <div class="flex items-center justify-between">
            <h2 class="text-lg font-semibold text-slate-100">Rangliste</h2>
            <span class="text-sm text-slate-400">{{ players|length }} Spieler</span>
          </div>
        </div>
        
        <div class="overflow-y-auto custom-scrollbar p-4 space-y-3" id="players-ranking">
          {% for player in players %}
          <div class="flex items-center p-4 bg-slate-800/40 hover:bg-slate-800/60 rounded-lg transition-all duration-200 border border-slate-700/30 hover:border-slate-600/50">
            <div class="flex-none w-10 h-10 rounded-lg flex items-center justify-center text-sm font-bold text-white
              {% if loop.index == 1 %}bg-gradient-to-br from-amber-400 to-yellow-500
              {% elseif loop.index == 2 %}bg-gradient-to-br from-slate-300 to-slate-400
              {% elseif loop.index == 3 %}bg-gradient-to-br from-orange-400 to-amber-500
              {% else %}bg-slate-600{% endif %}">
              {{ loop.index }}
            </div>
            
            <div class="flex-1 mx-4 min-w-0">
              <div class="font-medium truncate text-slate-100">{{ player.name }}</div>
              <div class="flex space-x-2 mt-1">
                <span class="px-2 py-0.5 rounded text-xs font-medium {{ player.hasJokerDoubleAvailable ? 'bg-emerald-500/20 text-emerald-400 border border-emerald-500/30' : 'bg-slate-700/50 text-slate-400 border border-slate-600/30' }}">
                  2× Bonus
                </span>
                <span class="px-2 py-0.5 rounded text-xs font-medium {{ player.hasJokerSwapAvailable ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30' : 'bg-slate-700/50 text-slate-400 border border-slate-600/30' }}">
                  Tausch
                </span>
              </div>
            </div>
            
            <div class="flex-none text-right">
              <div class="text-xl font-bold text-slate-100">{{ player.totalPoints }}</div>
              <div class="text-xs text-slate-400">Punkte</div>
            </div>
          </div>
          {% endfor %}
        </div>
      </div>
    </aside>

    <!-- CENTER CONTENT -->
    <section class="col-span-12 lg:col-span-6 tournament-center-content flex flex-col space-y-6 overflow-hidden">
      
      <!-- CURRENT GAME CARD -->
      <div id="current-game-card" class="professional-card p-6 flex flex-col space-y-4 hover-lift">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-2-9h-2M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div id="current-game-info">
              {% if current_game %}
              <h3 class="text-xl font-semibold text-slate-100">{{ current_game.name }}</h3>
              <p class="text-sm text-slate-400 uppercase tracking-wide">{{ current_game.gameType|replace({'_':' '}) }}</p>
              {% else %}
              <h3 class="text-xl font-semibold text-slate-400">Kein aktives Spiel</h3>
              <p class="text-sm text-slate-500">Warten auf nächsten Wettkampf</p>
              {% endif %}
            </div>
          </div>
          
          {% if current_game %}
          <div class="status-indicator">
            <div class="status-dot active"></div>
            <span class="text-sm font-medium text-emerald-400 uppercase tracking-wide">Live</span>
          </div>
          {% endif %}
        </div>
        
        <!-- GAME RESULTS -->
        <div id="game-results-container" class="hidden">
          <div class="border-t border-slate-700/50 pt-4">
            <h4 class="text-lg font-medium mb-4 text-slate-200 flex items-center space-x-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
              <span>Ergebnisse</span>
            </h4>
            <div id="game-results-list" class="space-y-2">
              <!-- Populated by JavaScript -->
            </div>
          </div>
        </div>
      </div>

      <!-- TOURNAMENT BRACKET -->
      <div id="tournament-bracket-container" class="hidden flex-1 professional-card p-6 overflow-hidden">
        <div class="flex items-center justify-center mb-6">
          <div class="w-8 h-8 bg-gradient-to-br from-amber-400 to-yellow-500 rounded-lg flex items-center justify-center mr-3">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"></path>
            </svg>
          </div>
          <h3 class="text-2xl font-bold gradient-text" id="tournament-title">{{ current_game.name ?? 'Turnier' }}</h3>
        </div>
        
        <div class="overflow-x-auto overflow-y-auto custom-scrollbar" id="tournament-bracket">
          <!-- Populated by JavaScript -->
        </div>
      </div>

      <!-- TOURNAMENT RESULTS -->
      <div id="tournament-results-container" class="hidden flex-1 professional-card p-6 overflow-hidden">
        <h3 class="text-2xl font-bold gradient-text mb-6 text-center">Turnier-Ergebnisse</h3>
        <div class="overflow-auto custom-scrollbar" id="tournament-results">
          <!-- Populated by JavaScript -->
        </div>
      </div>

      <!-- GAMECHANGER LIVE VIEW - VOLLSTÄNDIG ÜBERARBEITET -->
      <div id="gamechanger-container" class="hidden flex-1 professional-card p-6 overflow-hidden">
        <div class="flex items-center justify-center mb-6">
          <div class="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center mr-3">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
          </div>
          <h3 class="text-2xl font-bold gradient-text" id="gamechanger-title">Gamechanger</h3>
        </div>
        
        <!-- OPTIMALES GAMECHANGER LAYOUT: 3 SPALTEN -->
        <div class="h-full flex space-x-4 overflow-hidden">
          
          <!-- LINKS: LIVE RANGLISTE -->
          <div class="w-72 flex-shrink-0">
            <div class="professional-card h-full flex flex-col overflow-hidden">
              <div class="px-4 py-3 border-b border-slate-700/50 bg-gradient-to-r from-purple-500/20 to-pink-500/20">
                <div class="flex items-center justify-between">
                  <h4 class="text-lg font-semibold text-slate-100 flex items-center space-x-2">
                    <svg class="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                    <span>Live Rangliste</span>
                  </h4>
                  <div class="flex items-center space-x-2">
                    <div class="status-dot active"></div>
                    <span class="text-sm font-medium text-emerald-400" id="gamechanger-player-count">0</span>
                  </div>
                </div>
              </div>
              
              <div class="flex-1 overflow-y-auto custom-scrollbar p-2 space-y-1" id="gamechanger-live-ranking">
                <!-- Populated by JavaScript -->
              </div>
            </div>
          </div>
          
          <!-- MITTE: SPIELER INFO + STATISTIKEN + REGELN -->
          <div class="w-80 flex-shrink-0 flex flex-col space-y-3">
            
            <!-- AKTUELLER SPIELER -->
            <div class="professional-card p-3">
              <h4 class="text-sm font-semibold mb-2 text-slate-200 flex items-center space-x-2">
                <svg class="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                <span>Am Zug</span>
              </h4>
              <div class="text-center">
                <div class="w-14 h-14 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mx-auto mb-2">
                  <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                </div>
                <div class="font-bold text-lg text-slate-100" id="current-player-name">Wartend...</div>
                <div class="text-sm text-slate-400" id="current-player-points">Lade Daten...</div>
              </div>
            </div>
            
            <!-- STATISTIKEN -->
            <div class="professional-card p-3">
              <h4 class="text-sm font-semibold mb-2 text-slate-200 flex items-center space-x-2">
                <svg class="w-4 h-4 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                <span>Statistiken</span>
              </h4>
              <div class="grid grid-cols-2 gap-2">
                <div class="text-center p-2 bg-emerald-500/10 rounded-lg border border-emerald-500/30">
                  <div class="text-xl font-bold text-emerald-400" id="stat-bonus-hits">0</div>
                  <div class="text-xs text-emerald-300">🎯 Eigene</div>
                </div>
                <div class="text-center p-2 bg-red-500/10 rounded-lg border border-red-500/30">
                  <div class="text-xl font-bold text-red-400" id="stat-penalty-hits">0</div>
                  <div class="text-xs text-red-300">💥 Andere</div>
                </div>
                <div class="text-center p-2 bg-blue-500/10 rounded-lg border border-blue-500/30">
                  <div class="text-xl font-bold text-blue-400" id="stat-normal-throws">0</div>
                  <div class="text-xs text-blue-300">🎲 Normal</div>
                </div>
                <div class="text-center p-2 bg-slate-700/50 rounded-lg border border-slate-600/30">
                  <div class="text-xl font-bold text-slate-200" id="stat-total-throws">0</div>
                  <div class="text-xs text-slate-300">📊 Gesamt</div>
                </div>
              </div>
            </div>
            
            <!-- REGELN -->
            <div class="professional-card p-3">
              <h4 class="text-sm font-semibold mb-2 text-slate-200 flex items-center space-x-2">
                <svg class="w-4 h-4 text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>Regeln</span>
              </h4>
              <div class="space-y-1 text-xs">
                <div class="flex items-center justify-between p-2 bg-emerald-500/10 rounded border border-emerald-500/20">
                  <span class="text-emerald-300 flex items-center space-x-1">
                    <span>🎯</span>
                    <span>Eigene Punkte treffen</span>
                  </span>
                  <span class="text-emerald-400 font-bold">+8</span>
                </div>
                <div class="flex items-center justify-between p-2 bg-red-500/10 rounded border border-red-500/20">
                  <span class="text-red-300 flex items-center space-x-1">
                    <span>💥</span>
                    <span>Andere Spieler treffen</span>
                  </span>
                  <span class="text-red-400 font-bold">-4</span>
                </div>
                <div class="flex items-center justify-between p-2 bg-blue-500/10 rounded border border-blue-500/20">
                  <span class="text-blue-300 flex items-center space-x-1">
                    <span>🎲</span>
                    <span>Normale Würfe</span>
                  </span>
                  <span class="text-slate-400">0</span>
                </div>
              </div>
            </div>
          </div>
          
          <!-- RECHTS: WÜRFE HISTORIE (HOCHFORMAT) -->
          <div class="flex-1 professional-card p-3 overflow-hidden">
            <div class="flex items-center justify-between mb-3">
              <h4 class="text-lg font-semibold text-slate-200 flex items-center space-x-2">
                <svg class="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                <span>Würfe Historie</span>
              </h4>
              <div class="flex items-center space-x-2">
                <div class="status-dot active"></div>
                <span class="text-sm text-emerald-400">Live</span>
              </div>
            </div>
            
            <div class="overflow-y-auto custom-scrollbar space-y-2" id="gamechanger-throws">
              <!-- Populated by JavaScript -->
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- RIGHT PANEL -->
    <aside class="hidden lg:block lg:col-span-3 flex flex-col space-y-6 tournament-hide-sidebar">
      
      <!-- QR CODE ACCESS -->
      <div class="professional-card p-6 text-center hover-lift">
        <h4 class="text-lg font-medium mb-4 text-slate-200 flex items-center justify-center space-x-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
          <span>Spielerzugang</span>
        </h4>
        
        <div class="mx-auto mb-4 p-4 bg-white rounded-lg inline-block shadow-lg">
          <img src="https://api.qrserver.com/v1/create-qr-code/?size=140x140&data={{ url('app_player_access', {olympixId: olympix.id})|url_encode }}" 
               alt="QR Code" 
               class="block mx-auto"
               style="width: 140px; height: 140px;">
        </div>
        
        <p class="break-all text-xs text-slate-400 font-mono bg-slate-800/50 p-2 rounded border border-slate-700/50">
          {{ url('app_player_access', {olympixId: olympix.id}) }}
        </p>
      </div>

      <!-- GAME HISTORY -->
      <div class="professional-card overflow-hidden hover-lift">
        <div class="px-6 py-4 border-b border-slate-700/50">
          <h4 class="font-medium text-slate-200 flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
            </svg>
            <span>Spielhistorie</span>
          </h4>
        </div>
        
        <div class="overflow-y-auto custom-scrollbar p-4 space-y-3" id="game-history">
          {% for game in olympix.gamesByOrder %}
          <div class="flex items-center justify-between p-3 rounded-lg transition-all hover:bg-slate-700/30 border border-slate-700/30 hover:border-slate-600/50 {% if game.status == 'completed' %}bg-emerald-500/10 border-emerald-500/30{% elseif game.status == 'active' %}bg-blue-500/10 border-blue-500/30 pulse-glow{% else %}bg-slate-800/30{% endif %}">
            <div class="flex-1 min-w-0">
              <p class="font-medium truncate text-slate-100">{{ game.name }}</p>
              <p class="text-xs text-slate-400 uppercase tracking-wide">{{ game.gameType|replace({'_':' '}) }}</p>
            </div>
            <div class="text-lg ml-3">
              {% if game.status == 'completed' %}
                <div class="w-6 h-6 bg-emerald-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
              {% elseif game.status == 'active' %}
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z"></path>
                  </svg>
                </div>
              {% else %}
                <div class="w-6 h-6 bg-slate-600 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              {% endif %}
            </div>
          </div>
          {% endfor %}
        </div>
      </div>
    </aside>

  </main>
</div>

<script>
let refreshInterval;
let previousPlayersData = null; // Für Positionsänderungen
let previousGamechangerData = null; // Speichert vorherige Gamechanger-Daten

document.addEventListener('DOMContentLoaded', () => {
  console.log('Live Display initialized');

  function updateRanking(players) {
    const container = document.getElementById('players-ranking');
    if (!container || !Array.isArray(players)) return;
    
    let html = '';
    players.forEach((player, index) => {
      const position = index + 1;
      let bgClass = 'bg-slate-600';
      
      if (position === 1) bgClass = 'bg-gradient-to-br from-amber-400 to-yellow-500';
      else if (position === 2) bgClass = 'bg-gradient-to-br from-slate-300 to-slate-400';
      else if (position === 3) bgClass = 'bg-gradient-to-br from-orange-400 to-amber-500';
      
      const playerName = player.name || 'Unbekannt';
      const totalPoints = player.total_points || 0;
      const doubleJokerClass = player.joker_double_available ? 
        'bg-emerald-500/20 text-emerald-400 border border-emerald-500/30' : 
        'bg-slate-700/50 text-slate-400 border border-slate-600/30';
      const swapJokerClass = player.joker_swap_available ? 
        'bg-blue-500/20 text-blue-400 border border-blue-500/30' : 
        'bg-slate-700/50 text-slate-400 border border-slate-600/30';
      
      html += `
        <div class="flex items-center p-4 bg-slate-800/40 hover:bg-slate-800/60 rounded-lg transition-all duration-200 border border-slate-700/30 hover:border-slate-600/50">
          <div class="flex-none w-10 h-10 rounded-lg flex items-center justify-center text-sm font-bold text-white ${bgClass}">
            ${position}
          </div>
          <div class="flex-1 mx-4 min-w-0">
            <div class="font-medium truncate text-slate-100">${playerName}</div>
            <div class="flex space-x-2 mt-1">
              <span class="px-2 py-0.5 rounded text-xs font-medium ${doubleJokerClass}">2× Bonus</span>
              <span class="px-2 py-0.5 rounded text-xs font-medium ${swapJokerClass}">Tausch</span>
            </div>
          </div>
          <div class="flex-none text-right">
            <div class="text-xl font-bold text-slate-100">${totalPoints}</div>
            <div class="text-xs text-slate-400">Punkte</div>
          </div>
        </div>
      `;
    });
    
    container.innerHTML = html;
  }

  // VERBESSERTE GAMECHANGER RANGLISTE - ANIMATION NUR BEI ÄNDERUNGEN
  function updateGamechangerPlayerList(players) {
    const container = document.getElementById('gamechanger-live-ranking');
    const playerCountElement = document.getElementById('gamechanger-player-count');
    
    if (!container || !Array.isArray(players)) return;
    
    console.log('Updating Gamechanger player list with', players.length, 'players');
    
    // Spielerzahl aktualisieren
    if (playerCountElement) {
      playerCountElement.textContent = players.length + ' Spieler';
    }
    
    // Prüfe, ob sich die Rangliste geändert hat
    let hasChanges = false;
    let positionChanges = new Map();
    
    if (previousGamechangerData && previousGamechangerData.length > 0) {
      // Vergleiche mit vorherigen Daten
      const previousHash = previousGamechangerData.map(p => `${p.name || 'Unknown'}-${p.total_points || 0}`).join('|');
      const currentHash = players.map(p => `${p.name || 'Unknown'}-${p.total_points || 0}`).join('|');
      
      if (previousHash !== currentHash) {
        hasChanges = true;
        console.log('Gamechanger ranking has changed - calculating position changes');
        
        // Erstelle eine Map der vorherigen Positionen
        const previousPositions = new Map();
        previousGamechangerData.forEach((player, index) => {
          const playerId = player.id || player.name || 'Unknown';
          previousPositions.set(playerId, index + 1);
        });
        
        // Berechne Positionsänderungen
        players.forEach((player, index) => {
          const currentPosition = index + 1;
          const playerId = player.id || player.name || 'Unknown';
          const previousPosition = previousPositions.get(playerId);
          
          if (previousPosition && previousPosition !== currentPosition) {
            const change = previousPosition - currentPosition; // Positiver Wert = Aufstieg
            positionChanges.set(playerId, change);
            console.log(`Player ${player.name} moved from position ${previousPosition} to ${currentPosition} (change: ${change})`);
          }
        });
      }
    } else {
      hasChanges = true; // Erste Ladung
    }
    
    // Speichere aktuelle Daten für nächsten Vergleich
    previousGamechangerData = JSON.parse(JSON.stringify(players));
    
    let html = '';
    players.forEach((player, index) => {
      const position = index + 1;
      const playerName = player.name || 'Unbekannt';
      const totalPoints = player.total_points || 0;
      const playerId = player.id || player.name || 'Unknown';
      
      // Position Badge Styling
      let positionBadgeClass = 'bg-slate-600';
      if (position === 1) positionBadgeClass = 'bg-gradient-to-br from-amber-400 to-yellow-500';
      else if (position === 2) positionBadgeClass = 'bg-gradient-to-br from-slate-300 to-slate-400';
      else if (position === 3) positionBadgeClass = 'bg-gradient-to-br from-orange-400 to-amber-500';
      
      // Positionsänderung nur anzeigen wenn es Änderungen gibt
      let positionChangeIndicator = '';
      let animationClass = '';
      
      if (hasChanges && positionChanges.has(playerId)) {
        const change = positionChanges.get(playerId);
        
        if (change > 0) {
          positionChangeIndicator = `
            <div class="position-indicator up show">
              <svg class="w-3 h-3 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 11l5-5m0 0l5 5m-5-5v12"></path>
              </svg>
              +${change}
            </div>
          `;
          animationClass = 'position-up';
        } else if (change < 0) {
          positionChangeIndicator = `
            <div class="position-indicator down show">
              <svg class="w-3 h-3 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 13l-5 5m0 0l-5-5m5 5V6"></path>
              </svg>
              ${change}
            </div>
          `;
          animationClass = 'position-down';
        }
      }
      
      // Joker Status
      const doubleJokerClass = player.joker_double_available ? 
        'bg-emerald-500/20 text-emerald-400 border border-emerald-500/30' : 
        'bg-slate-700/50 text-slate-400 border border-slate-600/30';
      const swapJokerClass = player.joker_swap_available ? 
        'bg-blue-500/20 text-blue-400 border border-blue-500/30' : 
        'bg-slate-700/50 text-slate-400 border border-slate-600/30';
      
      html += `
        <div class="ranking-item ${animationClass} relative flex items-center p-2 bg-slate-800/40 hover:bg-slate-800/60 rounded-lg transition-all duration-200 border border-slate-700/30 hover:border-slate-600/50">
          
          <!-- Position Badge -->
          <div class="flex-none w-7 h-7 rounded-lg flex items-center justify-center text-xs font-bold text-white ${positionBadgeClass}">
            ${position}
          </div>
          
          <!-- Spieler Info -->
          <div class="flex-1 mx-2 min-w-0">
            <div class="font-medium truncate text-slate-100 text-sm">${playerName}</div>
            <div class="text-xs text-slate-400">${totalPoints} Punkte</div>
            
            <!-- Joker Status (kompakt) -->
            <div class="flex space-x-1 mt-1">
              <span class="px-1 py-0.5 rounded text-xs font-medium ${doubleJokerClass}">2×</span>
              <span class="px-1 py-0.5 rounded text-xs font-medium ${swapJokerClass}">⇄</span>
            </div>
          </div>
          
          <!-- Positionsänderung -->
          ${positionChangeIndicator}
        </div>
      `;
    });
    
    container.innerHTML = html;
    
    // Animationen nach kurzer Verzögerung ausblenden (nur wenn es Änderungen gab)
    if (hasChanges && positionChanges.size > 0) {
      setTimeout(() => {
        const indicators = container.querySelectorAll('.position-indicator');
        indicators.forEach(indicator => {
          indicator.classList.remove('show');
        });
      }, 3000);
    }
  }

  // AUTO-SCROLL VARIABLEN
  let gameHistoryScrollInterval;
  let gameHistoryScrollPosition = 0;
  let gameHistoryScrollDirection = 1; // 1 = nach unten, -1 = nach oben
  let gameHistoryPaused = false;
  let gameHistoryScrollStarted = false;

  function updateGameHistory(games) {
    const container = document.getElementById('game-history');
    if (!container || !Array.isArray(games)) return;
    
    let html = '';
    games.forEach(game => {
      let cardClass = 'bg-slate-800/30 border-slate-700/30';
      let iconHtml = '';
      
      if (game.status === 'completed') {
        cardClass = 'bg-emerald-500/10 border-emerald-500/30';
        iconHtml = `
          <div class="w-6 h-6 bg-emerald-500 rounded-full flex items-center justify-center">
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
        `;
      } else if (game.status === 'active') {
        cardClass = 'bg-blue-500/10 border-blue-500/30 pulse-glow';
        iconHtml = `
          <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
            <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M8 5v14l11-7z"></path>
            </svg>
          </div>
        `;
      } else {
        iconHtml = `
          <div class="w-6 h-6 bg-slate-600 rounded-full flex items-center justify-center">
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        `;
      }
      
      const gameName = game.name || 'Unbekanntes Spiel';
      const gameType = (game.type || 'Unbekannt').replace(/_/g, ' ');
      
      html += `
        <div class="flex items-center justify-between p-3 rounded-lg transition-all hover:bg-slate-700/30 border hover:border-slate-600/50 ${cardClass}">
          <div class="flex-1 min-w-0">
            <p class="font-medium truncate text-slate-100">${gameName}</p>
            <p class="text-xs text-slate-400 uppercase tracking-wide">${gameType}</p>
          </div>
          <div class="text-lg ml-3">${iconHtml}</div>
        </div>
      `;
    });
    
    container.innerHTML = html;
  }

  function startGameHistoryAutoScroll() {
    const container = document.getElementById('game-history');
    if (!container) return;
    
    if (gameHistoryScrollStarted) return;
    
    if (container.children.length > 5) {
      console.log('Starting game history auto-scroll');
      
      gameHistoryScrollPosition = 0;
      gameHistoryScrollDirection = 1;
      container.scrollTop = 0;
      gameHistoryScrollStarted = true;
      
      gameHistoryScrollInterval = setInterval(() => {
        if (gameHistoryPaused) return;
        
        const scrollStep = 0.5;
        const maxScroll = Math.max(50, container.scrollHeight - container.clientHeight);
        
        if (gameHistoryScrollDirection === 1) {
          gameHistoryScrollPosition += scrollStep;
          
          if (gameHistoryScrollPosition >= maxScroll) {
            gameHistoryScrollPosition = maxScroll;
            gameHistoryScrollDirection = -1;
            
            gameHistoryPaused = true;
            setTimeout(() => {
              gameHistoryPaused = false;
            }, 1500);
          }
        } else {
          gameHistoryScrollPosition -= scrollStep;
          
          if (gameHistoryScrollPosition <= 0) {
            gameHistoryScrollPosition = 0;
            gameHistoryScrollDirection = 1;
            
            gameHistoryPaused = true;
            setTimeout(() => {
              gameHistoryPaused = false;
            }, 1500);
          }
        }
        
        container.scrollTop = gameHistoryScrollPosition;
      }, 50);
    }
  }

  function stopGameHistoryAutoScroll() {
    if (gameHistoryScrollInterval) {
      clearInterval(gameHistoryScrollInterval);
      gameHistoryScrollInterval = null;
      gameHistoryScrollStarted = false;
    }
  }

  function setupGameHistoryHoverPause() {
    const container = document.getElementById('game-history');
    if (!container) return;
    
    container.addEventListener('mouseenter', () => {
      gameHistoryPaused = true;
    });
    
    container.addEventListener('mouseleave', () => {
      gameHistoryPaused = false;
    });
  }

  function updateCurrentGame(game) {
    const container = document.getElementById('current-game-info');
    const liveIndicatorParent = document.querySelector('.status-indicator');
    
    if (!container) return;
    
    if (game && game.name) {
      const statusText = game.status === 'active' ? 'Aktiv' : 
                        game.status === 'completed' ? 'Abgeschlossen' : 
                        'Ausstehend';
      
      const gameName = game.name || 'Unbekanntes Spiel';
      const gameType = (game.type || 'Unbekannt').replace(/_/g, ' ');
      
      container.innerHTML = `
        <h3 class="text-xl font-semibold text-slate-100">${gameName}</h3>
        <p class="text-sm text-slate-400 uppercase tracking-wide">${gameType} - ${statusText}</p>
      `;
      
      if (liveIndicatorParent) {
        liveIndicatorParent.style.display = game.status === 'active' ? 'flex' : 'none';
      }
    } else {
      container.innerHTML = `
        <h3 class="text-xl font-semibold text-slate-400">Kein aktives Spiel</h3>
        <p class="text-sm text-slate-500">Warten auf nächsten Wettkampf</p>
      `;
      if (liveIndicatorParent) {
        liveIndicatorParent.style.display = 'none';
      }
    }
  }

  function updateGameResults(gameResults) {
    const container = document.getElementById('game-results-container');
    const resultsList = document.getElementById('game-results-list');
    
    if (!container || !resultsList) return;
    
    if (gameResults && Array.isArray(gameResults) && gameResults.length > 0) {
      container.classList.remove('hidden');
      
      let html = '';
      gameResults.forEach(result => {
        const jokerText = result.jokers && result.jokers.length > 0 ? 
          ' (' + result.jokers.map(j => j === 'double' ? '2× Bonus' : 'Tausch').join(', ') + ')' : 
          '';
        
        // Korrekte Punkte-Anzeige (auch negative)
        const points = result.final_points !== undefined ? result.final_points : (result.points || 0);
        const pointsDisplay = points >= 0 ? '+' + points + ' Punkte' : points + ' Punkte';
        
        const playerName = result.player?.name || 'Unbekannt';
        const position = result.position || 0;
        
        html += `
          <div class="flex items-center justify-between p-3 bg-slate-800/40 rounded-lg border border-slate-700/30">
            <div class="flex items-center space-x-3">
              <div class="w-8 h-8 rounded-lg bg-slate-700/50 flex items-center justify-center text-sm font-bold text-slate-200">${position}</div>
              <div>
                <div class="font-medium text-slate-100">${playerName}</div>
                <div class="text-sm text-slate-400">${pointsDisplay}${jokerText}</div>
              </div>
            </div>
          </div>
        `;
      });
      
      resultsList.innerHTML = html;
    } else {
      container.classList.add('hidden');
    }
  }

  function updateTournamentBracket(game) {
    const sidebars = document.querySelectorAll('.tournament-hide-sidebar');
    const centerContent = document.querySelector('.tournament-center-content');
    const bracketContainer = document.getElementById('tournament-bracket-container');
    const tournamentTitle = document.getElementById('tournament-title');
    const currentGameCard = document.getElementById('current-game-card');
    
    const isTournament = game && (
      game.is_tournament_game || 
      game.isTournamentGame || 
      game.tournament_game ||
      (game.type && (
        game.type.includes('tournament') ||
        game.type === 'tournament_single' ||
        game.type === 'tournament_double'
      ))
    );
    
    const tournamentData = game && game.tournament;
    const shouldShowTournamentFullscreen = isTournament && tournamentData && game.status === 'active';
    
    if (shouldShowTournamentFullscreen) {
      stopGameHistoryAutoScroll();
      
      sidebars.forEach(sidebar => {
        sidebar.style.display = 'none';
      });
      
      // Current Game Card ausblenden
      if (currentGameCard) {
        currentGameCard.style.display = 'none';
      }
      
      if (centerContent) {
        centerContent.classList.remove('lg:col-span-6');
        centerContent.classList.add('lg:col-span-12');
      }
      
      if (bracketContainer) {
        bracketContainer.classList.remove('hidden');
      }
      
      if (tournamentTitle) {
        tournamentTitle.textContent = game.name || 'Turnier';
      }
      
      if (tournamentData.bracket_data) {
        updateBracketDisplay(tournamentData.bracket_data);
      }
      
    } else {
      // Current Game Card wieder einblenden
      if (currentGameCard) {
        currentGameCard.style.display = '';
      }
      
      sidebars.forEach(sidebar => {
        sidebar.style.display = '';
      });
      
      if (centerContent) {
        centerContent.classList.remove('lg:col-span-12');
        centerContent.classList.add('lg:col-span-6');
      }
      
      if (bracketContainer) {
        bracketContainer.classList.add('hidden');
      }
      
      if (!gameHistoryScrollStarted) {
        startGameHistoryAutoScroll();
      }
    }
  }

  function updateGamechangerView(game) {
    const sidebars = document.querySelectorAll('.tournament-hide-sidebar');
    const centerContent = document.querySelector('.tournament-center-content');
    const gamechangerContainer = document.getElementById('gamechanger-container');
    const gamechangerTitle = document.getElementById('gamechanger-title');
    const currentGameCard = document.getElementById('current-game-card');
    
    const isGamechanger = game && (
      game.is_gamechanger_game || 
      game.isGamechangerGame || 
      game.gamechanger_game ||
      (game.type && (
        game.type.includes('gamechanger') ||
        game.type === 'gamechanger'
      )) ||
      (game.name && game.name.toLowerCase().includes('gamechanger'))
    );
    
    const shouldShowGamechangerFullscreen = isGamechanger && 
      (game.status === 'active' || game.status === 'setup' || game.status === 'pending');
    
    if (shouldShowGamechangerFullscreen) {
      console.log('Switching to gamechanger FULLSCREEN view');
      
      stopGameHistoryAutoScroll();
      
      sidebars.forEach(sidebar => {
        sidebar.style.display = 'none';
      });
      
      // Current Game Card ausblenden
      if (currentGameCard) {
        currentGameCard.style.display = 'none';
      }
      
      if (centerContent) {
        centerContent.classList.remove('lg:col-span-6');
        centerContent.classList.add('lg:col-span-12');
      }
      
      if (gamechangerContainer) {
        gamechangerContainer.classList.remove('hidden');
      }
      
      if (gamechangerTitle) {
        gamechangerTitle.textContent = game.name || 'Gamechanger';
      }
      
      if (game.gamechanger) {
        updateGamechangerDisplayFromAPI(game.gamechanger);
      } else {
        updateGamechangerDisplayFromAPI(createMockGamechangerData());
      }
      
    } else {
      // Current Game Card wieder einblenden
      if (currentGameCard) {
        currentGameCard.style.display = '';
      }
      
      if (gamechangerContainer) {
        gamechangerContainer.classList.add('hidden');
      }
      
      const isTournament = game && (
        game.is_tournament_game || 
        game.isTournamentGame || 
        game.tournament_game ||
        (game.type && (
          game.type.includes('tournament') ||
          game.type === 'tournament_single' ||
          game.type === 'tournament_double'
        ))
      );
      
      if (!isTournament) {
        sidebars.forEach(sidebar => {
          sidebar.style.display = '';
        });
        
        if (centerContent) {
          centerContent.classList.remove('lg:col-span-12');
          centerContent.classList.add('lg:col-span-6');
        }
        
        if (!gameHistoryScrollStarted) {
          startGameHistoryAutoScroll();
        }
      }
    }
  }

  function updateGamechangerDisplayFromAPI(gamechangerData) {
    console.log('Updating Gamechanger display from API:', gamechangerData);
    
    // Aktueller Spieler
    const currentPlayerName = document.getElementById('current-player-name');
    const currentPlayerPoints = document.getElementById('current-player-points');
    
    if (gamechangerData.next_player) {
      if (currentPlayerName) {
        currentPlayerName.textContent = gamechangerData.next_player.name || 'Unbekannt';
      }
      if (currentPlayerPoints) {
        currentPlayerPoints.textContent = 'Ist am Zug';
      }
    } else {
      if (currentPlayerName) {
        currentPlayerName.textContent = gamechangerData.is_game_complete ? 'Spiel beendet' : 'Wartend...';
      }
      if (currentPlayerPoints) {
        currentPlayerPoints.textContent = gamechangerData.is_game_complete ? 'Alle haben geworfen' : 'Lade Daten...';
      }
    }
    
    // Statistiken
    if (gamechangerData.stats) {
      const stats = gamechangerData.stats;
      
      const bonusHits = document.getElementById('stat-bonus-hits');
      const penaltyHits = document.getElementById('stat-penalty-hits');
      const normalThrows = document.getElementById('stat-normal-throws');
      const totalThrows = document.getElementById('stat-total-throws');
      
      if (bonusHits) bonusHits.textContent = stats.bonusHits || 0;
      if (penaltyHits) penaltyHits.textContent = stats.penaltyHits || 0;
      if (normalThrows) normalThrows.textContent = stats.normalThrows || 0;
      if (totalThrows) totalThrows.textContent = stats.totalThrows || 0;
    }
    
    // Würfe anzeigen
    if (gamechangerData.throws && gamechangerData.throws.length > 0) {
      updateGamechangerThrows(gamechangerData.throws);
    } else {
      updateGamechangerThrows([]);
    }
  }

  function updateBracketDisplay(bracketData) {
    const bracketContent = document.getElementById('tournament-bracket');
    if (!bracketContent || !bracketData) return;

    let html = '<div class="flex space-x-8 justify-center items-start h-full overflow-x-auto custom-scrollbar">';
    
    if (bracketData.rounds && Array.isArray(bracketData.rounds)) {
      bracketData.rounds.forEach((round, roundIndex) => {
        html += '<div class="flex flex-col space-y-6 justify-center min-w-[220px]">';
        
        let roundTitle = 'Runde ' + (roundIndex + 1);
        if (roundIndex === bracketData.rounds.length - 1) {
          roundTitle = 'Finale';
        } else if (roundIndex === bracketData.rounds.length - 2) {
          roundTitle = 'Halbfinale';
        }
        
        html += `
          <div class="text-center py-3 px-4 bg-slate-700/50 rounded-lg border border-slate-600/50">
            <span class="text-sm font-semibold text-slate-200 uppercase tracking-wide">${roundTitle}</span>
          </div>
        `;
        
        if (Array.isArray(round)) {
          round.forEach(match => {
            const isCompleted = match.completed || false;
            const borderClass = isCompleted ? 'border-emerald-500/50 bg-emerald-500/10' : 'border-slate-600/30';
            const participant1Name = match.participant1?.name || 'TBD';
            const participant2Name = match.participant2?.name || 'TBD';
            const winnerName = match.winner?.name || '';
            
            html += `
              <div class="tournament-match p-4 bg-slate-800/40 rounded-lg border text-center ${borderClass}">
                <p class="font-medium truncate mb-2 text-slate-100">${participant1Name}</p>
                <div class="text-xs text-slate-400 mb-2 uppercase tracking-wide">VS</div>
                <p class="font-medium truncate mb-3 text-slate-100">${participant2Name}</p>
            `;
            
            if (isCompleted && winnerName) {
              html += `
                <div class="px-3 py-1 bg-emerald-500/20 rounded-full text-emerald-400 font-medium text-sm border border-emerald-500/30">
                  Sieger: ${winnerName}
                </div>
              `;
            }
            
            html += '</div>';
          });
        }
        
        html += '</div>';
      });
    }
    
    if (bracketData.thirdPlaceMatch) {
      const match = bracketData.thirdPlaceMatch;
      const isCompleted = match.completed || false;
      const borderClass = isCompleted ? 'border-amber-500/50' : 'border-amber-500/30';
      const participant1Name = match.participant1?.name || 'TBD';
      const participant2Name = match.participant2?.name || 'TBD';
      const winnerName = match.winner?.name || '';
      
      html += `
        <div class="flex flex-col space-y-6 justify-center min-w-[220px]">
          <div class="text-center py-3 px-4 bg-amber-500/20 rounded-lg border border-amber-500/30">
            <span class="text-sm font-semibold text-amber-400 uppercase tracking-wide">Spiel um Platz 3</span>
          </div>
          <div class="tournament-match p-4 bg-amber-500/10 rounded-lg border text-center ${borderClass}">
            <p class="font-medium truncate mb-2 text-slate-100">${participant1Name}</p>
            <div class="text-xs text-slate-400 mb-2 uppercase tracking-wide">VS</div>
            <p class="font-medium truncate mb-3 text-slate-100">${participant2Name}</p>
      `;
      
      if (isCompleted && winnerName) {
        html += `
          <div class="px-3 py-1 bg-amber-500/20 rounded-full text-amber-400 font-medium text-sm border border-amber-500/30">
            3. Platz: ${winnerName}
          </div>
        `;
      }
      
      html += '</div></div>';
    }
    
    html += '</div>';
    bracketContent.innerHTML = html;
  }

  function updateGamechangerThrows(throws) {
    const throwsContainer = document.getElementById('gamechanger-throws');
    if (!throwsContainer) return;
    
    if (!throws || throws.length === 0) {
      throwsContainer.innerHTML = `
        <div class="text-center text-slate-400 py-12">
          <div class="w-16 h-16 mx-auto mb-4 bg-slate-800/50 rounded-full flex items-center justify-center">
            <svg class="w-8 h-8 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
          </div>
          <p class="text-lg font-medium text-slate-300 mb-2">Gamechanger läuft</p>
          <p class="text-sm">Warten auf die ersten Würfe...</p>
        </div>
      `;
      return;
    }
    
    let html = '';
    const sortedThrows = [...throws].sort((a, b) => b.player_order - a.player_order);
    
    sortedThrows.forEach((throw_, index) => {
      const isBonus = throw_.scoring_reason && throw_.scoring_reason.includes('Eigene Punkte');
      const isPenalty = throw_.scoring_reason && throw_.scoring_reason.includes('getroffen') && !isBonus;
      
      let bgClass = 'bg-slate-800/40';
      let borderClass = 'border-slate-700/30';
      let icon = '';
      let statusBadge = '';
      
      if (isBonus) {
        bgClass = 'bg-emerald-500/10';
        borderClass = 'border-emerald-500/30';
        icon = '🎯';
        statusBadge = '<span class="px-2 py-1 bg-emerald-500/20 text-emerald-400 text-xs font-semibold rounded-full border border-emerald-500/30">BONUS +8</span>';
      } else if (isPenalty) {
        bgClass = 'bg-red-500/10';
        borderClass = 'border-red-500/30';
        icon = '💥';
        statusBadge = '<span class="px-2 py-1 bg-red-500/20 text-red-400 text-xs font-semibold rounded-full border border-red-500/30">TREFFER -4</span>';
      } else {
        icon = '🎲';
        statusBadge = '<span class="px-2 py-1 bg-slate-700/50 text-slate-400 text-xs rounded-full border border-slate-600/30">NORMAL</span>';
      }
      
      const playerName = throw_.player?.name || 'Unbekannt';
      const thrownPoints = throw_.thrown_points || 0;
      const pointsScored = throw_.points_scored || 0;
      const scoringReason = throw_.scoring_reason || 'Normaler Wurf';
      const thrownAt = throw_.thrown_at || '';
      const playerOrder = throw_.player_order || index + 1;
      
      html += `
        <div class="flex items-start space-x-2 p-2 ${bgClass} rounded-lg border ${borderClass} hover:bg-slate-700/20 transition-all">
          <div class="flex-shrink-0 text-center">
            <div class="w-8 h-8 rounded-full bg-slate-700/50 flex items-center justify-center text-sm mb-1">
              ${icon}
            </div>
            <div class="text-xs text-slate-500 font-mono">#${playerOrder}</div>
          </div>
          
          <div class="flex-1 min-w-0">
            <div class="flex items-center justify-between mb-1">
              <h5 class="font-bold text-slate-100 text-sm">${playerName}</h5>
              ${statusBadge}
            </div>
            
            <div class="flex items-center justify-between text-xs mb-1">
              <span class="text-slate-300">Wurf: <strong>${thrownPoints}</strong></span>
              <span class="text-slate-300">Effekt: <strong>${pointsScored > 0 ? '+' : ''}${pointsScored}</strong></span>
            </div>
            
            <div class="text-xs text-slate-400 mb-1">${scoringReason}</div>
            
            <div class="text-xs text-slate-500">
              ${thrownAt ? `⏰ ${thrownAt}` : ''}
            </div>
          </div>
        </div>
      `;
    });
    
    throwsContainer.innerHTML = html;
  }

  function createMockGamechangerData() {
    return {
      stats: {
        totalThrows: 0,
        bonusHits: 0,
        penaltyHits: 0,
        normalThrows: 0
      },
      throws: [],
      next_player: null,
      is_game_complete: false
    };
  }

  async function refresh() {
    try {
      const response = await fetch('/api/olympix/{{ olympix.id }}/status', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error('API Error: ' + response.status);
      }
      
      const data = await response.json();
      
      if (data.error) {
        throw new Error('API Error: ' + data.error);
      }
      
      // Update components
      if (data.players) {
        updateRanking(data.players);
        // Store previous data for position change detection
        previousPlayersData = data.players;
      }
      
      if (data.games) {
        updateGameHistory(data.games);
      } else {
        if (!gameHistoryScrollStarted) {
          startGameHistoryAutoScroll();
        }
      }
      
      // Check for Gamechanger
      const isGamechanger = data.current_game && (
        data.current_game.is_gamechanger_game || 
        data.current_game.isGamechangerGame || 
        data.current_game.gamechanger_game ||
        (data.current_game.type && (
          data.current_game.type.includes('gamechanger') ||
          data.current_game.type === 'gamechanger'
        )) ||
        (data.current_game.name && data.current_game.name.toLowerCase().includes('gamechanger'))
      );
      
      // Update Gamechanger view
      updateGamechangerView(data.current_game);
      
      // Update Gamechanger player list if active
      if (isGamechanger && data.players) {
        updateGamechangerPlayerList(data.players);
      }
      
      // Update Tournament view (only if not Gamechanger)
      if (!isGamechanger) {
        updateTournamentBracket(data.current_game);
      }
      
      // Update current game
      updateCurrentGame(data.current_game);
      
      // Update game results
      updateGameResults(data.game_results);
      
    } catch (error) {
      console.error('Refresh error:', error);
      if (!gameHistoryScrollInterval && !gameHistoryScrollStarted) {
        startGameHistoryAutoScroll();
      }
    }
  }

  // Initial setup
  refresh();
  setupGameHistoryHoverPause();
  
  setTimeout(() => {
    startGameHistoryAutoScroll();
  }, 500);
  
  refreshInterval = setInterval(refresh, 2000);
});

// Cleanup
window.addEventListener('beforeunload', () => {
  if (refreshInterval) clearInterval(refreshInterval);
  stopGameHistoryAutoScroll();
});
</script>

{% endblock %}
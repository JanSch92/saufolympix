{% extends 'base.html.twig' %}

{% block title %}Gamechanger - {{ game.name }}{% endblock %}

{% block body %}
<div class="container mx-auto px-4 py-8" id="gamechangerApp">
    <!-- Header -->
    <div class="mb-8">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold text-gray-800">🎯 {{ game.name }}</h1>
                <p class="text-lg text-gray-600 mt-2">{{ game.olympix.name }} - Gamechanger</p>
            </div>
            <div class="flex gap-3">
                <a href="{{ path('app_gamechanger_setup', {gameId: game.id}) }}" 
                   class="btn-secondary text-sm">
                    ⚙️ Setup
                </a>
                <a href="{{ path('app_game_admin', {id: game.olympix.id}) }}" 
                   class="btn-secondary text-sm">
                    ← Zurück
                </a>
            </div>
        </div>
    </div>

    <!-- GEFIXT: Bessere Anzeige des Spielstatus -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <!-- Aktueller Status -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-lg font-bold text-gray-800 mb-4">📊 Spielstatus</h2>
            <div class="space-y-3">
                {% set realThrows = throws|filter(t => t.thrownPoints > 0) %}
                <div class="flex justify-between">
                    <span class="text-gray-600">Echte Würfe:</span>
                    <span class="font-semibold">{{ realThrows|length }} / {{ players|length }}</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-600">Status:</span>
                    {% if is_game_complete %}
                        <span class="text-green-600 font-semibold">✅ Beendet</span>
                    {% else %}
                        <span class="text-blue-600 font-semibold">🎯 Aktiv</span>
                    {% endif %}
                </div>
                {% if next_player and not is_game_complete %}
                <div class="flex justify-between">
                    <span class="text-gray-600">Nächster:</span>
                    <span class="font-semibold text-blue-600">{{ next_player.name }}</span>
                </div>
                {% endif %}
                
                <!-- GEFIXT: Zeige Spielerreihenfolge an -->
                {% if not is_game_complete %}
                <div class="mt-4 pt-3 border-t">
                    <div class="text-sm text-gray-600 mb-2">Spielerreihenfolge:</div>
                    <div class="text-xs space-y-1">
                        {% for throw in throws|sort((a, b) => a.playerOrder <=> b.playerOrder) %}
                        <div class="flex items-center justify-between">
                            <span class="flex items-center">
                                <span class="w-6">{{ throw.playerOrder }}.</span>
                                <span class="{{ throw.thrownPoints > 0 ? 'line-through text-gray-400' : (next_player and throw.player.id == next_player.id ? 'font-bold text-blue-600' : '') }}">
                                    {{ throw.player.name }}
                                </span>
                            </span>
                            {% if throw.thrownPoints > 0 %}
                                <span class="text-green-600 text-xs">✅</span>
                            {% elseif next_player and throw.player.id == next_player.id %}
                                <span class="text-blue-600 text-xs">👆</span>
                            {% else %}
                                <span class="text-gray-400 text-xs">⏳</span>
                            {% endif %}
                        </div>
                        {% endfor %}
                    </div>
                </div>
                {% endif %}
            </div>
        </div>

        <!-- Statistiken -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-lg font-bold text-gray-800 mb-4">📈 Statistiken</h2>
            <div class="space-y-3 text-sm">
                <div class="flex justify-between">
                    <span class="text-gray-600">Bonus-Treffer:</span>
                    <span class="text-green-600 font-semibold">{{ stats.bonusHits }}</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-600">Strafen-Treffer:</span>
                    <span class="text-red-600 font-semibold">{{ stats.penaltyHits }}</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-600">Normale Würfe:</span>
                    <span class="text-gray-600 font-semibold">{{ stats.normalThrows }}</span>
                </div>
                {% if stats.totalBonusPoints > 0 or stats.totalPenaltyPoints > 0 %}
                <div class="pt-2 border-t">
                    <div class="flex justify-between text-xs">
                        <span class="text-green-600">Bonus-Punkte:</span>
                        <span class="text-green-600">+{{ stats.totalBonusPoints }}</span>
                    </div>
                    <div class="flex justify-between text-xs">
                        <span class="text-red-600">Strafen-Punkte:</span>
                        <span class="text-red-600">-{{ stats.totalPenaltyPoints }}</span>
                    </div>
                </div>
                {% endif %}
            </div>
        </div>

        <!-- Aktuelle Rangliste -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-lg font-bold text-gray-800 mb-4">🏆 Aktuelle Rangliste</h2>
            <div class="space-y-2">
                {% set sortedPlayers = players|sort((a, b) => b.totalPoints <=> a.totalPoints) %}
                {% for player in sortedPlayers|slice(0, 5) %}
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <span class="text-sm font-semibold w-6">{{ loop.index }}.</span>
                        <span class="text-sm {{ next_player and player.id == next_player.id ? 'font-bold text-blue-600' : '' }}">
                            {{ player.name }}
                            {% if next_player and player.id == next_player.id %}
                                <span class="text-xs">👆</span>
                            {% endif %}
                        </span>
                    </div>
                    <span class="text-sm font-bold text-blue-600">{{ player.totalPoints }}</span>
                </div>
                {% endfor %}
                {% if sortedPlayers|length > 5 %}
                <div class="text-xs text-gray-400 text-center pt-2">
                    ... und {{ sortedPlayers|length - 5 }} weitere
                </div>
                {% endif %}
            </div>
        </div>
    </div>

    {% if not is_game_complete %}
    <!-- Wurf eingeben -->
    <div class="bg-gradient-to-r from-blue-50 to-green-50 border border-blue-200 rounded-lg p-6 mb-8">
        <h2 class="text-xl font-bold text-gray-800 mb-4">🎯 Wurf eingeben</h2>
        
        {% if next_player %}
        <div class="bg-white rounded-lg p-4 mb-6">
            <div class="text-center">
                <div class="text-lg text-gray-600">Aktueller Spieler:</div>
                <div class="text-2xl font-bold text-blue-600 mt-2">{{ next_player.name }}</div>
                <div class="text-lg text-gray-500 mt-1">
                    Aktuelle Punkte: <span class="font-semibold">{{ current_player_points[next_player.id] }}</span>
                </div>
                <div class="text-sm text-green-600 mt-1 font-semibold">
                    💡 Treffe {{ current_player_points[next_player.id] }} für +8 Punkte!
                </div>
            </div>
        </div>

        <form id="throwForm" class="max-w-md mx-auto">
            <div class="space-y-4">
                <input type="hidden" name="player_id" value="{{ next_player.id }}">
                <div>
                    <label for="thrown_points" class="block text-sm font-medium text-gray-700 mb-2">
                        Geworfene Punkte:
                    </label>
                    <input type="number" 
                           name="thrown_points" 
                           id="thrown_points"
                           min="0" 
                           max="180" 
                           required
                           class="w-full px-4 py-3 text-lg text-center border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                           placeholder="0-180"
                           autofocus>
                </div>
                <button type="submit" 
                        class="w-full btn-primary text-lg py-3">
                    🎯 Wurf bestätigen
                </button>
            </div>
        </form>
        {% else %}
        <div class="text-center text-gray-600">
            <p class="text-lg">Alle Spieler haben bereits geworfen!</p>
            <p class="text-sm mt-2">Das Spiel wird automatisch abgeschlossen...</p>
        </div>
        {% endif %}
    </div>
    {% endif %}

    <!-- Wurf-Historie -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
        <div class="flex items-center justify-between mb-4">
            <h2 class="text-xl font-bold text-gray-800">📋 Wurf-Historie</h2>
            {% set realThrows = throws|filter(t => t.thrownPoints > 0) %}
            {% if realThrows|length > 0 and not is_game_complete %}
            <button onclick="undoLastThrow()" 
                    class="btn-secondary text-sm"
                    id="undoButton">
                ↶ Letzten Wurf rückgängig
            </button>
            {% endif %}
        </div>

        {% set realThrows = throws|filter(t => t.thrownPoints > 0)|sort((a, b) => a.playerOrder <=> b.playerOrder) %}
        {% if realThrows|length > 0 %}
        <div class="overflow-x-auto">
            <table class="w-full text-sm">
                <thead>
                    <tr class="border-b">
                        <th class="text-left py-2">#</th>
                        <th class="text-left py-2">Spieler</th>
                        <th class="text-center py-2">Geworfene Punkte</th>
                        <th class="text-center py-2">Effekt</th>
                        <th class="text-left py-2">Beschreibung</th>
                        <th class="text-center py-2">Zeit</th>
                    </tr>
                </thead>
                <tbody id="throwsTableBody">
                    {% for throw in realThrows %}
                    <tr class="border-b hover:bg-gray-50">
                        <td class="py-2 font-semibold">{{ throw.playerOrder }}.</td>
                        <td class="py-2">{{ throw.player.name }}</td>
                        <td class="py-2 text-center font-mono text-lg">{{ throw.thrownPoints }}</td>
                        <td class="py-2 text-center">
                            {% if throw.pointsScored > 0 %}
                                <span class="text-green-600 font-semibold">+{{ throw.pointsScored }}</span>
                            {% elseif throw.pointsScored < 0 %}
                                <span class="text-red-600 font-semibold">{{ throw.pointsScored }}</span>
                            {% else %}
                                <span class="text-gray-500">-</span>
                            {% endif %}
                        </td>
                        <td class="py-2 text-sm">
                            {% if throw.scoringReason == 'Keine besonderen Treffer' %}
                                <span class="text-gray-500">{{ throw.scoringReason }}</span>
                            {% elseif throw.pointsScored > 0 %}
                                <span class="text-green-600">{{ throw.scoringReason }}</span>
                            {% else %}
                                <span class="text-red-600">{{ throw.scoringReason }}</span>
                            {% endif %}
                        </td>
                        <td class="py-2 text-center text-xs text-gray-500">
                            {{ throw.thrownAt|date('H:i:s') }}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {% else %}
        <div class="text-center text-gray-500 py-8">
            <p class="text-lg">Noch keine Würfe vorhanden.</p>
            <p class="text-sm mt-2">Das Spiel startet, sobald der erste Spieler wirft.</p>
            {% if throws|length > 0 %}
            <div class="mt-4 text-xs">
                <p>Spielerreihenfolge wurde bereits festgelegt:</p>
                <div class="mt-2 text-gray-600">
                    {% for throw in throws|sort((a, b) => a.playerOrder <=> b.playerOrder) %}
                        {{ loop.index }}. {{ throw.player.name }}{% if not loop.last %}, {% endif %}
                    {% endfor %}
                </div>
            </div>
            {% endif %}
        </div>
        {% endif %}
    </div>

    {% if is_game_complete %}
    <!-- Spiel beendet -->
    <div class="bg-green-50 border border-green-200 rounded-lg p-6">
        <h2 class="text-xl font-bold text-green-800 mb-4">🎉 Spiel beendet!</h2>
        <p class="text-green-700 mb-4">Alle Spieler haben geworfen. Die Punkte sind in die Gesamtwertung eingeflossen.</p>
        
        <!-- Finale Rangliste -->
        <div class="bg-white rounded-lg p-4 mb-4">
            <h3 class="font-bold text-gray-800 mb-3">🏆 Finale Rangliste:</h3>
            <div class="space-y-2">
                {% set finalPlayers = players|sort((a, b) => b.totalPoints <=> a.totalPoints) %}
                {% for player in finalPlayers %}
                <div class="flex items-center justify-between {{ loop.index <= 3 ? 'font-bold' : '' }}">
                    <div class="flex items-center">
                        <span class="w-8">
                            {% if loop.index == 1 %}🥇
                            {% elseif loop.index == 2 %}🥈
                            {% elseif loop.index == 3 %}🥉
                            {% else %}{{ loop.index }}.
                            {% endif %}
                        </span>
                        <span>{{ player.name }}</span>
                    </div>
                    <span class="text-blue-600">{{ player.totalPoints }} Punkte</span>
                </div>
                {% endfor %}
            </div>
        </div>
        
        <div class="text-center">
            <a href="{{ path('app_game_admin', {id: game.olympix.id}) }}" 
               class="btn-primary">
                Zurück zur Übersicht
            </a>
        </div>
    </div>
    {% endif %}
</div>

<!-- Toast Notifications -->
<div id="toast" class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg hidden z-50">
    <span id="toastMessage"></span>
</div>

<script>
// Globale Variablen
const gameId = {{ game.id }};
let refreshInterval;

// Form Submit Handler
document.getElementById('throwForm')?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const playerId = formData.get('player_id');
    const thrownPoints = parseInt(formData.get('thrown_points'));
    
    if (thrownPoints < 0 || thrownPoints > 180) {
        showToast('Punkte müssen zwischen 0 und 180 liegen!', 'error');
        return;
    }
    
    // Disable submit button to prevent double-submission
    const submitButton = this.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.disabled = true;
    submitButton.textContent = '⏳ Verarbeite...';
    
    try {
        const response = await fetch(`/gamechanger/throw/${gameId}`, {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            showToast(`Wurf von ${data.throw.player_name}: ${data.throw.thrown_points} Punkte - ${data.throw.scoring_reason}`, 'success');
            
            // Reset form
            document.getElementById('thrown_points').value = '';
            
            // Reload page after short delay
            setTimeout(() => {
                window.location.reload();
            }, 2000);
            
        } else {
            showToast(data.message, 'error');
            submitButton.disabled = false;
            submitButton.textContent = originalText;
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('Fehler beim Übertragen des Wurfs!', 'error');
        submitButton.disabled = false;
        submitButton.textContent = originalText;
    }
});

// Undo Last Throw
async function undoLastThrow() {
    if (!confirm('Letzten Wurf wirklich rückgängig machen?')) {
        return;
    }
    
    try {
        const response = await fetch(`/gamechanger/undo-last/${gameId}`, {
            method: 'POST'
        });
        
        const data = await response.json();
        
        if (data.success) {
            showToast(data.message, 'success');
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            showToast(data.message, 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        showToast('Fehler beim Rückgängigmachen!', 'error');
    }
}

// Toast Notifications
function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    
    toastMessage.textContent = message;
    
    // Set color based on type
    if (type === 'error') {
        toast.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    } else {
        toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    }
    
    toast.classList.remove('hidden');
    
    setTimeout(() => {
        toast.classList.add('hidden');
    }, 4000);
}

// Auto-refresh status (every 5 seconds)
{% if not is_game_complete %}
refreshInterval = setInterval(async () => {
    try {
        const response = await fetch(`/gamechanger/status/${gameId}`);
        const data = await response.json();
        
        if (data.success && data.is_game_complete) {
            clearInterval(refreshInterval);
            showToast('Spiel beendet! Seite wird neu geladen...', 'success');
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        }
    } catch (error) {
        console.error('Status check error:', error);
    }
}, 5000);
{% endif %}

// Cleanup interval on page unload
window.addEventListener('beforeunload', () => {
    if (refreshInterval) {
        clearInterval(refreshInterval);
    }
});

// Enter key submit for points input
document.getElementById('thrown_points')?.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        e.preventDefault();
        document.getElementById('throwForm').dispatchEvent(new Event('submit'));
    }
});

// Auto-focus on points input when page loads
document.addEventListener('DOMContentLoaded', function() {
    const pointsInput = document.getElementById('thrown_points');
    if (pointsInput) {
        pointsInput.focus();
    }
});
</script>
{% endblock %}
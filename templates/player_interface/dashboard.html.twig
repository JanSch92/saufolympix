{% extends 'baselive.html.twig' %}

{% block title %}{{ player.name }} - {{ olympix.name }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #10b981;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        .joker-available {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }
        
        .joker-used {
            background: rgba(71, 85, 105, 0.6);
            color: #94a3b8;
        }
        
        .split-steal-btn {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            transition: all 0.3s ease;
        }
        
        .split-steal-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
        }
        
        .split-steal-btn.steal {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }
        
        .split-steal-btn.steal:hover {
            box-shadow: 0 8px 25px rgba(239, 68, 68, 0.3);
        }
        
        .game-active {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }
        
        .game-next {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            color: white;
        }
        
        .game-finished {
            background: rgba(71, 85, 105, 0.3);
            color: #94a3b8;
        }
        
        .ranking-position {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            color: white;
        }
        
        .ranking-you {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            border: 1px solid rgba(16, 185, 129, 0.3);
        }
    </style>
{% endblock %}

{% block body %}
<div class="w-screen h-screen flex flex-col bg-slate-900 text-slate-100 overflow-hidden pb-20">

    <!-- Header -->
    <header class="flex-none h-16 flex items-center justify-between px-4 bg-slate-800/50 backdrop-blur-xl border-b border-slate-700/50">
        <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
            </div>
            <div>
                <h1 id="player-name" class="text-lg font-bold gradient-text">
                    {% if player is defined %}{{ player.name }}{% else %}Lade...{% endif %}
                </h1>
                <p class="text-xs text-slate-400">{{ olympix.name }}</p>
            </div>
        </div>
        
        <div class="flex items-center space-x-2">
            <div class="status-dot"></div>
            <span class="text-xs text-emerald-400 font-medium">Live</span>
        </div>
    </header>

    <!-- Split or Steal Interface -->
    <div id="split-or-steal-interface" class="hidden flex-1 flex flex-col p-4 space-y-4">
        <div class="professional-card p-6 text-center">
            <div class="w-12 h-12 bg-gradient-to-br from-amber-400 to-yellow-500 rounded-xl flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
            </div>
            <h2 class="text-xl font-bold gradient-text mb-2">Split or Steal</h2>
            <div class="text-sm text-slate-400 mb-4">
                <span id="points-at-stake">0</span> Punkte
            </div>
            
            <div class="professional-card p-4 mb-6 bg-slate-800/40">
                <div class="text-sm text-slate-400 mb-2">Gegner</div>
                <div id="opponent-name" class="text-lg font-bold text-slate-100">Lade...</div>
            </div>
            
            <div id="choice-buttons" class="space-y-3">
                <button onclick="makeChoice('split')" 
                        class="split-steal-btn w-full py-4 px-6 text-white font-bold rounded-lg">
                    ü§ù SPLIT
                </button>
                
                <button onclick="makeChoice('steal')" 
                        class="split-steal-btn steal w-full py-4 px-6 text-white font-bold rounded-lg">
                    üí∞ STEAL
                </button>
            </div>
            
            <div id="choice-made" class="hidden">
                <div class="professional-card p-4 bg-emerald-500/20 border border-emerald-500/30">
                    <div class="font-semibold text-emerald-400 mb-2">Wahl gespeichert</div>
                    <div id="player-choice" class="text-emerald-300 font-medium"></div>
                    <div class="text-xs text-emerald-400 mt-2">Warte auf Auswertung...</div>
                </div>
            </div>
            
            <div id="match-result" class="hidden">
                <div class="professional-card p-4 bg-blue-500/20 border border-blue-500/30">
                    <div class="font-semibold text-blue-400 mb-2">Ergebnis</div>
                    <div id="result-description" class="text-blue-300 text-sm mb-2"></div>
                    <div id="points-earned" class="text-lg font-bold text-blue-100"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Tab Content -->
    <div id="main-content" class="flex-1 p-4 space-y-4 overflow-y-auto">
        
        <!-- Points & Position -->
        <div class="professional-card p-6">
            <div class="flex items-center justify-between mb-4">
                <div class="text-center">
                    <div class="text-sm text-slate-400">Deine Punkte</div>
                    <div id="player-points" class="text-3xl font-bold gradient-text">
                        {% if player is defined %}{{ player.totalPoints }}{% else %}0{% endif %}
                    </div>
                </div>
                <div class="text-center">
                    <div class="text-sm text-slate-400">Position</div>
                    <div id="player-position" class="text-3xl font-bold text-slate-200">
                        {% if player is defined and players is defined %}
                            {% set position = 0 %}
                            {% for p in players %}
                                {% if p.id == player.id %}
                                    {% set position = loop.index %}
                                {% endif %}
                            {% endfor %}
                            #{{ position }}
                        {% else %}
                            #-
                        {% endif %}
                    </div>
                </div>
            </div>
            
            <!-- Joker Buttons -->
            <div class="grid grid-cols-2 gap-3">
                <button id="double-joker-btn" onclick="navigateToDoubleJoker()" 
                        class="joker-available py-3 px-4 rounded-lg font-medium transition-all hover:scale-105"
                        {% if player is defined and not player.hasJokerDoubleAvailable %}disabled{% endif %}>
                    üî• Doppelte Punkte
                </button>
                <button id="swap-joker-btn" onclick="navigateToSwapJoker()" 
                        class="joker-available py-3 px-4 rounded-lg font-medium transition-all hover:scale-105"
                        {% if player is defined and not player.hasJokerSwapAvailable %}disabled{% endif %}>
                    ‚áÑ Punktetausch
                </button>
            </div>
            
            <!-- Pending Joker Info -->
            <div id="pending-joker-info" class="mt-3 text-xs text-slate-400 hidden">
                <div id="pending-text"></div>
            </div>
        </div>
        
        <!-- Game Status -->
        <div class="professional-card p-6">
            <div class="flex items-center space-x-2 mb-4">
                <svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                <span class="text-sm font-medium text-slate-400">Spiel</span>
            </div>
            
            <div id="game-status">
                {% if current_game is defined and current_game %}
                    <div class="game-active p-4 rounded-lg">
                        <div class="font-semibold">{{ current_game.name }}</div>
                    </div>
                {% elseif next_game is defined and next_game %}
                    <div class="game-next p-4 rounded-lg">
                        <div class="font-semibold">N√§chstes: {{ next_game.name }}</div>
                    </div>
                {% else %}
                    <div class="game-finished p-4 rounded-lg text-center">
                        <div class="text-lg mb-1">üèÅ</div>
                        <div class="font-semibold">Alle Spiele gespielt</div>
                    </div>
                {% endif %}
            </div>
        </div>
        
    </div>
    
    <!-- Ranking Tab Content -->
    <div id="ranking-content" class="hidden flex-1 p-4 overflow-y-auto">
        <div class="professional-card p-6">
            <div class="flex items-center space-x-2 mb-4">
                <svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"></path>
                </svg>
                <span class="text-sm font-medium text-slate-400">Live-Rangliste</span>
            </div>
            
            <div id="ranking-list" class="space-y-2">
                {% if players is defined %}
                    {% for p in players %}
                        <div class="flex items-center justify-between p-3 
                            {% if player is defined and p.id == player.id %}ranking-you{% else %}professional-card{% endif %} 
                            rounded-lg">
                            <div class="flex items-center space-x-3">
                                <div class="ranking-position w-8 h-8 rounded-lg flex items-center justify-center text-sm font-bold">
                                    {{ loop.index }}
                                </div>
                                <div class="font-medium text-slate-100">
                                    {{ p.name }}
                                    {% if player is defined and p.id == player.id %} (Du){% endif %}
                                </div>
                            </div>
                            <div class="font-bold text-slate-100">{{ p.totalPoints }}</div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="text-center text-slate-400">Lade Rangliste...</div>
                {% endif %}
            </div>
        </div>
    </div>

    <!-- Mobile Navigation -->
    <div class="mobile-nav">
        <a href="#" id="nav-button" class="group active" onclick="toggleView()">
            <svg id="nav-icon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            <span id="nav-text" class="text-xs">Rangliste</span>
        </a>
    </div>
</div>

<script>
    const olympixId = {{ olympix.id }};
    const storageKey = `olympix_${olympixId}_selected_player`;
    let currentPlayer = null;
    let activeMatch = null;
    let refreshInterval = null;
    let isRefreshing = false;
    let currentView = 'main';
    let jokerData = {
        doubleAvailable: true,
        swapAvailable: true,
        canUseDouble: true,
        canUseSwap: true
    };
    
    window.addEventListener('DOMContentLoaded', function() {
        {% if player is defined %}
            currentPlayer = {
                id: {{ player.id }},
                name: "{{ player.name }}",
                points: {{ player.totalPoints }}
            };
            localStorage.setItem(storageKey, JSON.stringify(currentPlayer));
            refreshData();
            startAutoRefresh();
        {% else %}
            loadSelectedPlayer();
            if (currentPlayer) {
                refreshData();
                startAutoRefresh();
            }
        {% endif %}
        
        showTab('main');
    });
    
    function loadSelectedPlayer() {
        const storedPlayer = localStorage.getItem(storageKey);
        if (!storedPlayer) {
            window.location.href = `/player-access/${olympixId}`;
            return;
        }
        
        try {
            currentPlayer = JSON.parse(storedPlayer);
            document.getElementById('player-name').textContent = currentPlayer.name;
            document.getElementById('player-points').textContent = currentPlayer.points || 0;
        } catch (e) {
            localStorage.removeItem(storageKey);
            window.location.href = `/player-access/${olympixId}`;
        }
    }
    
    function toggleView() {
        if (currentView === 'main') {
            showTab('ranking');
        } else {
            showTab('main');
        }
    }
    
    function showTab(tabName) {
        document.getElementById('main-content').classList.add('hidden');
        document.getElementById('ranking-content').classList.add('hidden');
        
        const navIcon = document.getElementById('nav-icon');
        const navText = document.getElementById('nav-text');
        
        if (tabName === 'main') {
            currentView = 'main';
            document.getElementById('main-content').classList.remove('hidden');
            navIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>';
            navText.textContent = 'Rangliste';
        } else if (tabName === 'ranking') {
            currentView = 'ranking';
            document.getElementById('ranking-content').classList.remove('hidden');
            navIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>';
            navText.textContent = 'Dashboard';
        }
    }
    
    function refreshData() {
        if (!currentPlayer || isRefreshing) return;
        
        isRefreshing = true;
        
        fetchWithFallback(`/api/player/${olympixId}/active-split-or-steal?player_id=${currentPlayer.id}`)
            .then(data => {
                if (data && !data.error) {
                    updateSplitOrStealInterface(data);
                } else {
                    document.getElementById('split-or-steal-interface').classList.add('hidden');
                    document.getElementById('main-content').classList.remove('hidden');
                    
                    return Promise.all([
                        fetchWithFallback(`/api/player/${olympixId}/${currentPlayer.id}/status`),
                        fetchWithFallback(`/api/player/${olympixId}/${currentPlayer.id}/joker-status`)
                    ]);
                }
            })
            .then(results => {
                if (results) {
                    const [statusData, jokerData] = results;
                    
                    if (statusData && !statusData.error) {
                        updatePlayerData(statusData);
                    }
                    
                    if (jokerData && !jokerData.error) {
                        updateJokerInterface(jokerData);
                    } else {
                        updateJokerInterfaceFallback();
                    }
                }
            })
            .catch(error => {
                console.error('Error refreshing data:', error);
            })
            .finally(() => {
                isRefreshing = false;
            });
    }
    
    function fetchWithFallback(url) {
        return fetch(url)
            .then(response => {
                if (!response.ok) {
                    return { error: `HTTP ${response.status}` };
                }
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    return { error: 'Keine JSON-Antwort erhalten' };
                }
                return response.json();
            })
            .catch(error => {
                return { error: error.message };
            });
    }
    
    function updateSplitOrStealInterface(data) {
        const splitInterface = document.getElementById('split-or-steal-interface');
        const mainContent = document.getElementById('main-content');
        
        if (data && data.active_match) {
            activeMatch = data.active_match;
            splitInterface.classList.remove('hidden');
            mainContent.classList.add('hidden');
            
            document.getElementById('opponent-name').textContent = activeMatch.opponent.name;
            document.getElementById('points-at-stake').textContent = activeMatch.points_at_stake;
            
            document.getElementById('choice-buttons').style.display = 'block';
            document.getElementById('choice-made').classList.add('hidden');
            document.getElementById('match-result').classList.add('hidden');
            
            if (activeMatch.has_chosen) {
                showChoiceMade(activeMatch.player_choice);
            }
            
            if (activeMatch.is_completed) {
                showMatchResult();
            }
        } else {
            splitInterface.classList.add('hidden');
            mainContent.classList.remove('hidden');
            activeMatch = null;
        }
    }
    
    function updatePlayerData(data) {
        if (data.player) {
            currentPlayer.points = data.player.total_points;
            document.getElementById('player-points').textContent = data.player.total_points;
            document.getElementById('player-position').textContent = `#${data.player.position}`;
            
            localStorage.setItem(storageKey, JSON.stringify(currentPlayer));
        }
        
        if (data.ranking) {
            updateRanking(data.ranking);
        }
        
        updateGameStatus(data.current_game, data.next_game);
    }
    
    function updateJokerInterface(data) {
        jokerData.doubleAvailable = data.joker_double_available_global !== false;
        jokerData.swapAvailable = data.joker_swap_available_global !== false;
        jokerData.canUseDouble = data.can_use_double_joker !== false;
        jokerData.canUseSwap = data.can_use_swap_joker !== false;
        
        const doubleBtn = document.getElementById('double-joker-btn');
        const swapBtn = document.getElementById('swap-joker-btn');
        
        if (jokerData.doubleAvailable) {
            doubleBtn.className = 'joker-available py-3 px-4 rounded-lg font-medium transition-all hover:scale-105';
            doubleBtn.disabled = false;
        } else {
            doubleBtn.className = 'joker-used py-3 px-4 rounded-lg font-medium';
            doubleBtn.disabled = true;
        }
        
        if (jokerData.swapAvailable) {
            swapBtn.className = 'joker-available py-3 px-4 rounded-lg font-medium transition-all hover:scale-105';
            swapBtn.disabled = false;
        } else {
            swapBtn.className = 'joker-used py-3 px-4 rounded-lg font-medium';
            swapBtn.disabled = true;
        }
        
        loadPendingJokers();
    }
    
    function updateJokerInterfaceFallback() {
        {% if player is defined %}
            jokerData.doubleAvailable = {{ player.hasJokerDoubleAvailable ? 'true' : 'false' }};
            jokerData.swapAvailable = {{ player.hasJokerSwapAvailable ? 'true' : 'false' }};
            
            updateJokerInterface({
                joker_double_available_global: jokerData.doubleAvailable,
                joker_swap_available_global: jokerData.swapAvailable,
                can_use_double_joker: jokerData.doubleAvailable,
                can_use_swap_joker: jokerData.swapAvailable
            });
        {% endif %}
    }
    
    function loadPendingJokers() {
        const pendingInfo = document.getElementById('pending-joker-info');
        const pendingText = document.getElementById('pending-text');
        
        if (!jokerData.doubleAvailable || !jokerData.swapAvailable) {
            pendingInfo.classList.remove('hidden');
            
            let text = '';
            if (!jokerData.doubleAvailable) {
                text += 'üî• Doppelte Punkte vorgemerkt ';
            }
            if (!jokerData.swapAvailable) {
                text += '‚áÑ Punktetausch vorgemerkt';
            }
            
            if (text) {
                pendingText.textContent = text;
            } else {
                pendingInfo.classList.add('hidden');
            }
        } else {
            pendingInfo.classList.add('hidden');
        }
    }
    
    function makeChoice(choice) {
        if (!activeMatch || activeMatch.has_chosen) return;
        
        const buttons = document.querySelectorAll('#choice-buttons button');
        buttons.forEach(btn => btn.disabled = true);
        
        const formData = new FormData();
        formData.append('player_id', currentPlayer.id);
        formData.append('choice', choice);
        
        fetch(`/split-or-steal/player-choice/${activeMatch.id}`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showChoiceMade(choice);
                activeMatch.has_chosen = true;
                activeMatch.player_choice = choice;
            } else {
                buttons.forEach(btn => btn.disabled = false);
            }
        })
        .catch(error => {
            buttons.forEach(btn => btn.disabled = false);
        });
    }
    
    function showChoiceMade(choice) {
        document.getElementById('choice-buttons').style.display = 'none';
        document.getElementById('choice-made').classList.remove('hidden');
        
        const choiceText = choice === 'split' ? 'ü§ù SPLIT' : 'üí∞ STEAL';
        document.getElementById('player-choice').textContent = choiceText;
    }
    
    function showMatchResult() {
        document.getElementById('choice-made').classList.add('hidden');
        document.getElementById('match-result').classList.remove('hidden');
        
        document.getElementById('result-description').textContent = activeMatch.result_description;
        const pointsEarned = activeMatch.player_points || 0;
        document.getElementById('points-earned').textContent = `+${pointsEarned} Punkte`;
    }
    
    function updateRanking(ranking) {
        const container = document.getElementById('ranking-list');
        let html = '';
        
        ranking.forEach((player, index) => {
            const position = index + 1;
            const isCurrentPlayer = player.id === parseInt(currentPlayer.id);
            
            html += `
                <div class="flex items-center justify-between p-3 ${isCurrentPlayer ? 'ranking-you' : 'professional-card'} rounded-lg">
                    <div class="flex items-center space-x-3">
                        <div class="ranking-position w-8 h-8 rounded-lg flex items-center justify-center text-sm font-bold">
                            ${position}
                        </div>
                        <div class="font-medium text-slate-100">
                            ${player.name}${isCurrentPlayer ? ' (Du)' : ''}
                        </div>
                    </div>
                    <div class="font-bold text-slate-100">${player.total_points}</div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }
    
    function updateGameStatus(currentGame, nextGame) {
        const container = document.getElementById('game-status');
        
        if (currentGame) {
            container.innerHTML = `
                <div class="game-active p-4 rounded-lg">
                    <div class="font-semibold">${currentGame.name}</div>
                </div>
            `;
        } else if (nextGame) {
            container.innerHTML = `
                <div class="game-next p-4 rounded-lg">
                    <div class="font-semibold">N√§chstes: ${nextGame.name}</div>
                </div>
            `;
        } else {
            container.innerHTML = `
                <div class="game-finished p-4 rounded-lg text-center">
                    <div class="text-lg mb-1">üèÅ</div>
                    <div class="font-semibold">Alle Spiele gespielt</div>
                </div>
            `;
        }
    }
    
    function startAutoRefresh() {
        refreshInterval = setInterval(refreshData, 5000);
    }
    
    function navigateToDoubleJoker() {
        if (jokerData.canUseDouble) {
            window.location.href = `/player-joker-double/${olympixId}/${currentPlayer.id}`;
        }
    }
    
    function navigateToSwapJoker() {
        if (jokerData.canUseSwap) {
            window.location.href = `/player-joker-swap/${olympixId}/${currentPlayer.id}`;
        }
    }
    
    window.addEventListener('beforeunload', function() {
        if (refreshInterval) {
            clearInterval(refreshInterval);
        }
    });
    
    document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
        } else {
            if (currentPlayer) {
                refreshData();
                startAutoRefresh();
            }
        }
    });
</script>
{% endblock %}
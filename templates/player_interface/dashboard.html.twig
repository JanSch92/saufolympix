<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - {{ olympix.name }}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-size: 14px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 0.75rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .btn-joker {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-weight: 600;
            font-size: 12px;
            transition: all 0.3s ease;
        }
        
        .btn-joker:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(240, 147, 251, 0.4);
        }
        
        .btn-joker:disabled {
            background: #e5e7eb;
            color: #9ca3af;
            transform: none;
            box-shadow: none;
        }
        
        .split-button {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            transition: all 0.3s ease;
        }
        
        .split-button:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
        }
        
        .steal-button {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            transition: all 0.3s ease;
        }
        
        .steal-button:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
        }
        
        .button-disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
        }
        
        .pulse {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        .spinner {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .compact-joker {
            padding: 0.5rem;
            border-radius: 0.5rem;
            border: 1px solid;
        }
        
        .compact-joker.available {
            background: #dcfce7;
            border-color: #86efac;
        }
        
        .compact-joker.used {
            background: #fee2e2;
            border-color: #fca5a5;
        }
        
        .joker-info {
            background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
            border: 1px solid #fca5a5;
            border-radius: 0.5rem;
            padding: 0.5rem;
        }
        
        .joker-info.available {
            background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
            border-color: #86efac;
        }
    </style>
</head>
<body class="p-2">
    <div class="max-w-sm mx-auto space-y-3">
        
        <!-- Header -->
        <div class="card p-4">
            <div class="text-center">
                <h1 id="player-name" class="text-lg font-bold text-gray-800">
                    {% if player is defined %}
                        {{ player.name }}
                    {% else %}
                        Lade...
                    {% endif %}
                </h1>
                <p class="text-sm text-gray-600">{{ olympix.name }}</p>
                <div class="text-xs text-gray-500 mt-1">
                    <span id="last-update">Zuletzt: gerade eben</span>
                </div>
            </div>
        </div>
        
        <!-- Split or Steal Interface -->
        <div id="split-or-steal-interface" class="hidden">
            <div class="card p-4">
                <div class="text-center mb-4">
                    <h2 class="text-lg font-bold text-gray-800 mb-1">üí∞ Split or Steal</h2>
                    <div class="text-sm text-gray-700">
                        <span id="points-at-stake">0</span> Punkte
                    </div>
                </div>
                
                <div class="mb-4">
                    <div class="text-sm font-medium text-gray-800 mb-2">Gegen:</div>
                    <div class="bg-gray-100 rounded-lg p-2">
                        <div id="opponent-name" class="font-bold text-gray-800 text-center">
                            Lade...
                        </div>
                    </div>
                </div>
                
                <div id="choice-buttons" class="space-y-3">
                    <button onclick="makeChoice('split')" 
                            class="split-button w-full py-3 px-4 text-white font-bold rounded-lg">
                        ü§ù SPLIT
                        <div class="text-xs font-normal opacity-90">Punkte teilen</div>
                    </button>
                    
                    <button onclick="makeChoice('steal')" 
                            class="steal-button w-full py-3 px-4 text-white font-bold rounded-lg">
                        üí∞ STEAL
                        <div class="text-xs font-normal opacity-90">Alle Punkte</div>
                    </button>
                </div>
                
                <div id="choice-made" class="hidden text-center p-3 bg-blue-50 rounded-lg">
                    <div class="font-semibold text-blue-800 mb-1">
                        ‚úÖ Wahl gespeichert
                    </div>
                    <div id="player-choice" class="text-blue-700 text-sm font-medium"></div>
                    <div class="text-xs text-blue-600 mt-1">
                        Warte auf Auswertung...
                    </div>
                    <div class="mt-2">
                        <div class="spinner mx-auto"></div>
                    </div>
                </div>
                
                <div id="match-result" class="hidden text-center p-3 rounded-lg">
                    <div class="font-semibold mb-1">üèÜ Ergebnis</div>
                    <div id="result-description" class="text-gray-700 text-sm mb-1"></div>
                    <div id="points-earned" class="text-lg font-bold"></div>
                </div>
            </div>
        </div>
        
        <!-- Tab Navigation -->
        <div class="card p-2">
            <div class="flex space-x-1">
                <button id="main-tab" onclick="showTab('main')" 
                        class="flex-1 py-2 px-3 bg-blue-100 text-blue-700 rounded text-sm font-medium">
                    üìä Dashboard
                </button>
                <button id="ranking-tab" onclick="showTab('ranking')" 
                        class="flex-1 py-2 px-3 bg-gray-100 text-gray-700 rounded text-sm font-medium">
                    üèÜ Rangliste
                </button>
            </div>
        </div>
        
        <!-- Standard Interface -->
        <div id="standard-interface">
            <!-- Main Tab Content -->
            <div id="main-content">
                <!-- Punkte & Joker kombiniert -->
                <div class="card p-4">
                    <div class="flex items-center justify-between mb-3">
                        <div class="text-center">
                            <div class="text-xs text-gray-600">Meine Punkte</div>
                            <div id="player-points" class="text-2xl font-bold text-blue-600">
                                {% if player is defined %}
                                    {{ player.totalPoints }}
                                {% else %}
                                    0
                                {% endif %}
                            </div>
                            <div id="player-position" class="text-xs text-gray-500">
                                {% if player is defined and players is defined %}
                                    {% set position = 0 %}
                                    {% for p in players %}
                                        {% if p.id == player.id %}
                                            {% set position = loop.index %}
                                        {% endif %}
                                    {% endfor %}
                                    Platz {{ position }} / {{ players|length }}
                                {% else %}
                                    Platz - / -
                                {% endif %}
                            </div>
                        </div>
                        <div class="text-center">
                            <div class="text-xs text-gray-600 mb-1">Joker</div>
                            <div class="flex space-x-2">
                                <div id="double-joker-indicator" class="w-8 h-8 rounded-full 
                                    {% if player is defined and player.hasJokerDoubleAvailable %}bg-green-100{% else %}bg-red-100{% endif %} 
                                    flex items-center justify-center text-xs" title="Doppelte Punkte">
                                    üî•
                                </div>
                                <div id="swap-joker-indicator" class="w-8 h-8 rounded-full 
                                    {% if player is defined and player.hasJokerSwapAvailable %}bg-green-100{% else %}bg-red-100{% endif %} 
                                    flex items-center justify-center text-xs" title="Punkte tauschen">
                                    ‚áÑ
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Joker Buttons -->
                    <div class="grid grid-cols-2 gap-2">
                        <button id="double-joker-btn" onclick="navigateToDoubleJoker()" 
                                class="btn-joker w-full text-center"
                                {% if player is defined and not player.hasJokerDoubleAvailable %}disabled{% endif %}>
                            {% if player is defined and player.hasJokerDoubleAvailable %}
                                üî• Doppelt
                            {% else %}
                                üî• Verwendet
                            {% endif %}
                        </button>
                        <button id="swap-joker-btn" onclick="navigateToSwapJoker()" 
                                class="btn-joker w-full text-center"
                                {% if player is defined and not player.hasJokerSwapAvailable %}disabled{% endif %}>
                            {% if player is defined and player.hasJokerSwapAvailable %}
                                ‚áÑ Tausch
                            {% else %}
                                ‚áÑ Verwendet
                            {% endif %}
                        </button>
                    </div>
                    
                    <!-- Pending Joker Info -->
                    <div id="pending-joker-info" class="mt-2 text-xs text-gray-600 hidden">
                        <div id="pending-text"></div>
                    </div>
                </div>
                
                <!-- Spiel Status -->
                <div class="card p-4">
                    <div class="text-sm font-bold text-gray-800 mb-2">üéÆ Spiel</div>
                    <div id="game-status">
                        {% if current_game is defined and current_game %}
                            <div class="bg-green-50 border border-green-200 rounded-lg p-3">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <div class="font-medium text-green-800 text-sm">{{ current_game.name }}</div>
                                        <div class="text-xs text-green-600">{{ current_game.gameType|replace({'_': ' '}) }}</div>
                                    </div>
                                    <div class="text-green-600 pulse">‚ñ∂Ô∏è</div>
                                </div>
                            </div>
                        {% elseif next_game is defined and next_game %}
                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <div class="font-medium text-blue-800 text-sm">N√§chstes: {{ next_game.name }}</div>
                                        <div class="text-xs text-blue-600">{{ next_game.gameType|replace({'_': ' '}) }}</div>
                                    </div>
                                    <div class="text-blue-600">‚è≠Ô∏è</div>
                                </div>
                            </div>
                        {% else %}
                            <div class="bg-gray-50 rounded-lg p-3">
                                <div class="text-center text-gray-500 text-sm">
                                    <div class="text-lg mb-1">‚è∏Ô∏è</div>
                                    <div>Kein aktives Spiel</div>
                                </div>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
            
            <!-- Ranking Tab Content -->
            <div id="ranking-content" class="hidden">
                <div class="card p-4">
                    <div class="text-sm font-bold text-gray-800 mb-3">üèÜ Live-Rangliste</div>
                    <div id="ranking-list" class="space-y-1">
                        {% if players is defined %}
                            {% for p in players %}
                                <div class="flex items-center justify-between p-2 
                                    {% if player is defined and p.id == player.id %}bg-blue-50 border border-blue-200{% else %}bg-gray-50{% endif %} 
                                    rounded text-sm">
                                    <div class="flex items-center space-x-2">
                                        <div class="w-5 h-5 bg-gray-200 rounded-full flex items-center justify-center text-xs font-bold">
                                            {{ loop.index }}
                                        </div>
                                        <div class="font-medium 
                                            {% if player is defined and p.id == player.id %}text-blue-800{% else %}text-gray-800{% endif %}">
                                            {{ p.name }}
                                            {% if player is defined and p.id == player.id %} (Du){% endif %}
                                        </div>
                                    </div>
                                    <div class="font-bold 
                                        {% if player is defined and p.id == player.id %}text-blue-800{% else %}text-gray-800{% endif %}">
                                        {{ p.totalPoints }}
                                    </div>
                                </div>
                            {% endfor %}
                        {% else %}
                            <div class="text-center text-gray-500 text-sm">Lade Rangliste...</div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Navigation -->
        <div class="card p-3">
            <div class="flex space-x-2">
                <button onclick="resetPlayerSelection()" 
                        class="flex-1 text-center py-2 px-3 bg-gray-100 text-gray-700 rounded text-sm">
                    üë§ Wechseln
                </button>
                <button onclick="refreshData()" 
                        class="flex-1 text-center py-2 px-3 bg-blue-100 text-blue-700 rounded text-sm"
                        id="refresh-btn">
                    üîÑ Refresh
                </button>
            </div>
        </div>
        
        <!-- Error Message -->
        <div id="error-message" class="hidden card p-3 bg-red-50 border-red-200 border">
            <div class="text-red-800 font-medium text-sm">‚ö†Ô∏è Fehler</div>
            <div id="error-text" class="text-red-700 text-xs mt-1"></div>
        </div>
    </div>

    <script>
        const olympixId = {{ olympix.id }};
        const storageKey = `olympix_${olympixId}_selected_player`;
        let currentPlayer = null;
        let activeMatch = null;
        let refreshInterval = null;
        let isRefreshing = false;
        let jokerData = {
            doubleAvailable: true,
            swapAvailable: true,
            canUseDouble: true,
            canUseSwap: true
        };
        
        // Initialize
        window.addEventListener('DOMContentLoaded', function() {
            console.log('Initializing dashboard for olympixId:', olympixId);
            
            // Check if we have a player from Twig template
            {% if player is defined %}
                currentPlayer = {
                    id: {{ player.id }},
                    name: "{{ player.name }}",
                    points: {{ player.totalPoints }}
                };
                console.log('Player from template:', currentPlayer);
                localStorage.setItem(storageKey, JSON.stringify(currentPlayer));
                checkAPIAvailability();
                refreshData();
                startAutoRefresh();
            {% else %}
                console.log('No player in template, checking localStorage');
                loadSelectedPlayer();
                if (currentPlayer) {
                    console.log('Player from localStorage:', currentPlayer);
                    checkAPIAvailability();
                    refreshData();
                    startAutoRefresh();
                }
            {% endif %}
            
            showTab('main'); // Start with main tab
        });
        
        function loadSelectedPlayer() {
            const storedPlayer = localStorage.getItem(storageKey);
            if (!storedPlayer) {
                window.location.href = `/player-access/${olympixId}`;
                return;
            }
            
            try {
                currentPlayer = JSON.parse(storedPlayer);
                document.getElementById('player-name').textContent = currentPlayer.name;
                document.getElementById('player-points').textContent = currentPlayer.points || 0;
            } catch (e) {
                console.error('Error parsing stored player data:', e);
                localStorage.removeItem(storageKey);
                window.location.href = `/player-access/${olympixId}`;
            }
        }
        
        function refreshData() {
            if (!currentPlayer || isRefreshing) return;
            
            isRefreshing = true;
            const refreshBtn = document.getElementById('refresh-btn');
            refreshBtn.innerHTML = '<div class="spinner mx-auto"></div>';
            refreshBtn.disabled = true;
            
            // Hide error message
            document.getElementById('error-message').classList.add('hidden');
            
            // Load player status
            fetchWithFallback(`/api/player/${olympixId}/${currentPlayer.id}/status`)
                .then(data => {
                    if (data && !data.error) {
                        updatePlayerData(data);
                    }
                    return fetchWithFallback(`/api/player/${olympixId}/active-split-or-steal?player_id=${currentPlayer.id}`);
                })
                .then(data => {
                    if (data && !data.error) {
                        updateSplitOrStealInterface(data);
                    }
                    return fetchWithFallback(`/api/player/${olympixId}/${currentPlayer.id}/joker-status`);
                })
                .then(data => {
                    if (data && !data.error) {
                        updateJokerInterface(data);
                    } else {
                        console.warn('Joker status not available:', data);
                        // Use fallback joker data from template
                        updateJokerInterfaceFallback();
                    }
                    updateLastRefresh();
                })
                .catch(error => {
                    console.error('Error refreshing data:', error);
                    showError('Fehler beim Laden der Daten: ' + error.message);
                })
                .finally(() => {
                    refreshBtn.innerHTML = 'üîÑ Refresh';
                    refreshBtn.disabled = false;
                    isRefreshing = false;
                });
        }
        
        function fetchWithFallback(url) {
            return fetch(url)
                .then(response => {
                    if (!response.ok) {
                        console.warn(`HTTP ${response.status} f√ºr ${url}`);
                        return { error: `HTTP ${response.status}` };
                    }
                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/json')) {
                        console.warn(`Keine JSON-Antwort von ${url}`);
                        return { error: 'Keine JSON-Antwort erhalten' };
                    }
                    return response.json();
                })
                .catch(error => {
                    console.warn(`Fehler bei ${url}:`, error);
                    return { error: error.message };
                });
        }
        
        function checkAPIAvailability() {
            console.log('Checking API availability...');
            console.log('Player status API:', `/api/player/${olympixId}/${currentPlayer.id}/status`);
            console.log('Split or steal API:', `/api/player/${olympixId}/active-split-or-steal?player_id=${currentPlayer.id}`);
            console.log('Joker status API:', `/api/player/${olympixId}/${currentPlayer.id}/joker-status`);
            
            // Test basic status API
            fetch(`/api/player/${olympixId}/${currentPlayer.id}/status`)
                .then(response => {
                    console.log('Status API response:', response.status, response.statusText);
                    return response.text();
                })
                .then(text => {
                    console.log('Status API response text:', text.substring(0, 200) + '...');
                })
                .catch(error => {
                    console.error('Status API error:', error);
                });
        }
        
        function updateJokerInterfaceFallback() {
            // Use data from Twig template if available
            {% if player is defined %}
                jokerData.doubleAvailable = {{ player.hasJokerDoubleAvailable ? 'true' : 'false' }};
                jokerData.swapAvailable = {{ player.hasJokerSwapAvailable ? 'true' : 'false' }};
                jokerData.canUseDouble = {{ can_use_double_joker ? 'true' : 'false' }};
                jokerData.canUseSwap = {{ can_use_swap_joker ? 'true' : 'false' }};
                
                updateJokerInterface({
                    joker_double_available_global: jokerData.doubleAvailable,
                    joker_swap_available_global: jokerData.swapAvailable,
                    can_use_double_joker: jokerData.canUseDouble,
                    can_use_swap_joker: jokerData.canUseSwap
                });
            {% else %}
                console.warn('Keine Fallback-Joker-Daten verf√ºgbar');
            {% endif %}
        }
        
        function updatePlayerData(data) {
            console.log('Updating player data with:', data);
            
            if (data.player) {
                currentPlayer.points = data.player.total_points;
                document.getElementById('player-points').textContent = data.player.total_points;
                document.getElementById('player-position').textContent = `Platz ${data.player.position} / ${data.ranking ? data.ranking.length : '-'}`;
                
                // Update localStorage
                localStorage.setItem(storageKey, JSON.stringify(currentPlayer));
            }
            
            if (data.ranking) {
                updateRanking(data.ranking);
            }
            
            // Update game status
            updateGameStatus(data.current_game, data.next_game);
        }
        
        function updateSplitOrStealInterface(data) {
            const splitInterface = document.getElementById('split-or-steal-interface');
            const standardInterface = document.getElementById('standard-interface');
            
            if (data && data.active_match) {
                activeMatch = data.active_match;
                splitInterface.classList.remove('hidden');
                standardInterface.classList.add('hidden');
                
                document.getElementById('opponent-name').textContent = activeMatch.opponent.name;
                document.getElementById('points-at-stake').textContent = activeMatch.points_at_stake;
                
                document.getElementById('choice-buttons').style.display = 'block';
                document.getElementById('choice-made').classList.add('hidden');
                document.getElementById('match-result').classList.add('hidden');
                
                if (activeMatch.has_chosen) {
                    showChoiceMade(activeMatch.player_choice);
                }
                
                if (activeMatch.is_completed) {
                    showMatchResult();
                }
            } else {
                splitInterface.classList.add('hidden');
                standardInterface.classList.remove('hidden');
                activeMatch = null;
                showTab('main');
            }
        }
        
        function updateJokerInterface(data) {
            if (!data) {
                console.warn('No joker data received, using fallback');
                updateJokerInterfaceFallback();
                return;
            }
            
            console.log('Updating joker interface with data:', data);
            
            jokerData.doubleAvailable = data.joker_double_available_global !== false;
            jokerData.swapAvailable = data.joker_swap_available_global !== false;
            jokerData.canUseDouble = data.can_use_double_joker !== false;
            jokerData.canUseSwap = data.can_use_swap_joker !== false;
            
            // Update indicators
            const doubleIndicator = document.getElementById('double-joker-indicator');
            const swapIndicator = document.getElementById('swap-joker-indicator');
            const doubleBtn = document.getElementById('double-joker-btn');
            const swapBtn = document.getElementById('swap-joker-btn');
            
            // Double joker
            if (jokerData.doubleAvailable) {
                doubleIndicator.className = 'w-8 h-8 rounded-full bg-green-100 flex items-center justify-center text-xs';
                doubleBtn.disabled = false;
                doubleBtn.className = 'btn-joker w-full text-center';
                doubleBtn.textContent = 'üî• Doppelt';
            } else {
                doubleIndicator.className = 'w-8 h-8 rounded-full bg-red-100 flex items-center justify-center text-xs';
                doubleBtn.disabled = true;
                doubleBtn.className = 'btn-joker w-full text-center';
                doubleBtn.textContent = 'üî• Verwendet';
            }
            
            // Swap joker
            if (jokerData.swapAvailable) {
                swapIndicator.className = 'w-8 h-8 rounded-full bg-green-100 flex items-center justify-center text-xs';
                swapBtn.disabled = false;
                swapBtn.className = 'btn-joker w-full text-center';
                swapBtn.textContent = '‚áÑ Tausch';
            } else {
                swapIndicator.className = 'w-8 h-8 rounded-full bg-red-100 flex items-center justify-center text-xs';
                swapBtn.disabled = true;
                swapBtn.className = 'btn-joker w-full text-center';
                swapBtn.textContent = '‚áÑ Verwendet';
            }
            
            // Load pending jokers
            loadPendingJokers();
        }
        
        function loadPendingJokers() {
            const pendingInfo = document.getElementById('pending-joker-info');
            const pendingText = document.getElementById('pending-text');
            
            if (!jokerData.doubleAvailable || !jokerData.swapAvailable) {
                pendingInfo.classList.remove('hidden');
                
                Promise.all([
                    jokerData.doubleAvailable ? Promise.resolve({pending_doubles: []}) : fetchWithFallback(`/api/player/${olympixId}/${currentPlayer.id}/pending-doubles`),
                    jokerData.swapAvailable ? Promise.resolve({pending_swaps: []}) : fetchWithFallback(`/api/player/${olympixId}/${currentPlayer.id}/pending-swaps`)
                ])
                .then(([doubleData, swapData]) => {
                    let text = '';
                    
                    if (doubleData && doubleData.pending_doubles && doubleData.pending_doubles.length > 0) {
                        text += `üî• ${doubleData.pending_doubles[0].game_name} `;
                    }
                    
                    if (swapData && swapData.pending_swaps && swapData.pending_swaps.length > 0) {
                        text += `‚áÑ ${swapData.pending_swaps[0].target_player_name} (${swapData.pending_swaps[0].game_name})`;
                    }
                    
                    if (text) {
                        pendingText.textContent = text;
                    } else {
                        // Show fallback info if APIs don't work
                        if (!jokerData.doubleAvailable) {
                            text += 'üî• Doppelte Punkte vorgemerkt ';
                        }
                        if (!jokerData.swapAvailable) {
                            text += '‚áÑ Tausch vorgemerkt';
                        }
                        
                        if (text) {
                            pendingText.textContent = text;
                        } else {
                            pendingInfo.classList.add('hidden');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error loading pending jokers:', error);
                    // Show basic info even if API fails
                    let text = '';
                    if (!jokerData.doubleAvailable) {
                        text += 'üî• Doppelte Punkte vorgemerkt ';
                    }
                    if (!jokerData.swapAvailable) {
                        text += '‚áÑ Tausch vorgemerkt';
                    }
                    
                    if (text) {
                        pendingText.textContent = text;
                    } else {
                        pendingInfo.classList.add('hidden');
                    }
                });
            } else {
                pendingInfo.classList.add('hidden');
            }
        }
        
        function makeChoice(choice) {
            if (!activeMatch || activeMatch.has_chosen) return;
            
            const buttons = document.querySelectorAll('#choice-buttons button');
            buttons.forEach(btn => {
                btn.disabled = true;
                btn.classList.add('button-disabled');
            });
            
            const formData = new FormData();
            formData.append('player_id', currentPlayer.id);
            formData.append('choice', choice);
            
            fetch(`/split-or-steal/player-choice/${activeMatch.id}`, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    return response.json();
                } else {
                    throw new Error('Server returned non-JSON response');
                }
            })
            .then(data => {
                if (data.success) {
                    showChoiceMade(choice);
                    activeMatch.has_chosen = true;
                    activeMatch.player_choice = choice;
                } else {
                    showError(data.error || 'Fehler beim Speichern');
                    buttons.forEach(btn => {
                        btn.disabled = false;
                        btn.classList.remove('button-disabled');
                    });
                }
            })
            .catch(error => {
                console.error('Error making choice:', error);
                showError('Fehler beim Speichern: ' + error.message);
                buttons.forEach(btn => {
                    btn.disabled = false;
                    btn.classList.remove('button-disabled');
                });
            });
        }
        
        function showChoiceMade(choice) {
            document.getElementById('choice-buttons').style.display = 'none';
            document.getElementById('choice-made').classList.remove('hidden');
            
            const choiceText = choice === 'split' ? 'ü§ù SPLIT' : 'üí∞ STEAL';
            document.getElementById('player-choice').textContent = choiceText;
        }
        
        function showMatchResult() {
            document.getElementById('choice-made').classList.add('hidden');
            document.getElementById('match-result').classList.remove('hidden');
            
            document.getElementById('result-description').textContent = activeMatch.result_description;
            const pointsEarned = activeMatch.player_points || 0;
            document.getElementById('points-earned').textContent = `+${pointsEarned} Punkte`;
        }
        
        function updateRanking(ranking) {
            const container = document.getElementById('ranking-list');
            let html = '';
            
            ranking.forEach((player, index) => {
                const position = index + 1;
                const isCurrentPlayer = player.id === parseInt(currentPlayer.id);
                
                html += `
                    <div class="flex items-center justify-between p-2 ${isCurrentPlayer ? 'bg-blue-50 border border-blue-200' : 'bg-gray-50'} rounded text-sm">
                        <div class="flex items-center space-x-2">
                            <div class="w-5 h-5 bg-gray-200 rounded-full flex items-center justify-center text-xs font-bold">
                                ${position}
                            </div>
                            <div class="font-medium ${isCurrentPlayer ? 'text-blue-800' : 'text-gray-800'}">
                                ${player.name}${isCurrentPlayer ? ' (Du)' : ''}
                            </div>
                        </div>
                        <div class="font-bold ${isCurrentPlayer ? 'text-blue-800' : 'text-gray-800'}">
                            ${player.total_points}
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }
        
        function updateGameStatus(currentGame, nextGame) {
            const container = document.getElementById('game-status');
            
            if (currentGame) {
                container.innerHTML = `
                    <div class="bg-green-50 border border-green-200 rounded-lg p-3">
                        <div class="flex items-center justify-between">
                            <div>
                                <div class="font-medium text-green-800 text-sm">${currentGame.name}</div>
                                <div class="text-xs text-green-600">${currentGame.type.replace('_', ' ')}</div>
                            </div>
                            <div class="text-green-600 pulse">‚ñ∂Ô∏è</div>
                        </div>
                    </div>
                `;
            } else if (nextGame) {
                container.innerHTML = `
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
                        <div class="flex items-center justify-between">
                            <div>
                                <div class="font-medium text-blue-800 text-sm">N√§chstes: ${nextGame.name}</div>
                                <div class="text-xs text-blue-600">${nextGame.type.replace('_', ' ')}</div>
                            </div>
                            <div class="text-blue-600">‚è≠Ô∏è</div>
                        </div>
                    </div>
                `;
            } else {
                container.innerHTML = `
                    <div class="bg-gray-50 rounded-lg p-3">
                        <div class="text-center text-gray-500 text-sm">
                            <div class="text-lg mb-1">üèÅ</div>
                            <div>Alle Spiele gespielt</div>
                        </div>
                    </div>
                `;
            }
        }
        
        function updateLastRefresh() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' });
            document.getElementById('last-update').textContent = `Zuletzt: ${timeString}`;
        }
        
        function startAutoRefresh() {
            refreshInterval = setInterval(refreshData, 8000); // Alle 8 Sekunden
        }
        
        function resetPlayerSelection() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
            localStorage.removeItem(storageKey);
            window.location.href = `/player-access/${olympixId}`;
        }
        
        function showError(message) {
            document.getElementById('error-text').textContent = message;
            document.getElementById('error-message').classList.remove('hidden');
            setTimeout(() => {
                document.getElementById('error-message').classList.add('hidden');
            }, 4000);
        }
        
        function showTab(tabName) {
            // Hide all tab contents
            document.getElementById('main-content').classList.add('hidden');
            document.getElementById('ranking-content').classList.add('hidden');
            
            // Reset all tab buttons
            document.getElementById('main-tab').className = 'flex-1 py-2 px-3 bg-gray-100 text-gray-700 rounded text-sm font-medium';
            document.getElementById('ranking-tab').className = 'flex-1 py-2 px-3 bg-gray-100 text-gray-700 rounded text-sm font-medium';
            
            // Show selected tab and activate button
            if (tabName === 'main') {
                document.getElementById('main-content').classList.remove('hidden');
                document.getElementById('main-tab').className = 'flex-1 py-2 px-3 bg-blue-100 text-blue-700 rounded text-sm font-medium';
            } else if (tabName === 'ranking') {
                document.getElementById('ranking-content').classList.remove('hidden');
                document.getElementById('ranking-tab').className = 'flex-1 py-2 px-3 bg-blue-100 text-blue-700 rounded text-sm font-medium';
            }
        }
        
        function navigateToDoubleJoker() {
            if (jokerData.canUseDouble) {
                if (confirm('Doppelte Punkte Joker wirklich vormerken?')) {
                    window.location.href = `/player-joker-double/${olympixId}/${currentPlayer.id}`;
                }
            }
        }
        
        function navigateToSwapJoker() {
            if (jokerData.canUseSwap) {
                if (confirm('Punkte-Tausch Joker wirklich einsetzen?')) {
                    window.location.href = `/player-joker-swap/${olympixId}/${currentPlayer.id}`;
                }
            }
        }
        
        // Cleanup and visibility handling
        window.addEventListener('beforeunload', function() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
        });
        
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                if (refreshInterval) {
                    clearInterval(refreshInterval);
                }
            } else {
                if (currentPlayer) {
                    refreshData();
                    startAutoRefresh();
                }
            }
        });
    </script>
</body>
</html>